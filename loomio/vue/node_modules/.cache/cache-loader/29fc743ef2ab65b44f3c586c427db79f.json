{"remainingRequest":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js!/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js!/home/gustavo/Documents/tese/loomio/vue/src/shared/models/user_model.coffee","dependencies":[{"path":"/home/gustavo/Documents/tese/loomio/vue/src/shared/models/user_model.coffee","mtime":1706724415808},{"path":"/home/gustavo/Documents/tese/loomio/vue/.babelrc","mtime":1706724415792},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/cache-loader/dist/cjs.js","mtime":1706724497848},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js","mtime":1706724500796},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js","mtime":1706724497848}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90cnVuY2F0ZSBmcm9tICJsb2Rhc2gvdHJ1bmNhdGUiOwppbXBvcnQgX21hcCBmcm9tICJsb2Rhc2gvbWFwIjsKaW1wb3J0IF9jb21wYWN0IGZyb20gImxvZGFzaC9jb21wYWN0IjsKaW1wb3J0IF9oZWFkIGZyb20gImxvZGFzaC9oZWFkIjsKaW1wb3J0IF91bmlxIGZyb20gImxvZGFzaC91bmlxIjsKaW1wb3J0IF9mbGF0dGVuIGZyb20gImxvZGFzaC9mbGF0dGVuIjsKaW1wb3J0IF9maWx0ZXIgZnJvbSAibG9kYXNoL2ZpbHRlciI7CmltcG9ydCBfZmluZCBmcm9tICJsb2Rhc2gvZmluZCI7CnZhciBVc2VyTW9kZWw7CmltcG9ydCBCYXNlTW9kZWwgZnJvbSAnQC9zaGFyZWQvcmVjb3JkX3N0b3JlL2Jhc2VfbW9kZWwnOwppbXBvcnQgQXBwQ29uZmlnIGZyb20gJ0Avc2hhcmVkL3NlcnZpY2VzL2FwcF9jb25maWcnOwpleHBvcnQgZGVmYXVsdCBVc2VyTW9kZWwgPSBmdW5jdGlvbiAoKSB7CiAgY2xhc3MgVXNlck1vZGVsIGV4dGVuZHMgQmFzZU1vZGVsIHsKICAgIHJlbGF0aW9uc2hpcHMoKSB7CiAgICAgIHJldHVybiB0aGlzLmhhc01hbnkoJ21lbWJlcnNoaXBzJyk7CiAgICB9IC8vICAgQGhhc01hbnkgJ25vdGlmaWNhdGlvbnMnCiAgICAvLyAgIEBoYXNNYW55ICdjb250YWN0cycKICAgIC8vICAgQGhhc01hbnkgJ3ZlcnNpb25zJwogICAgLy8gICBAaGFzTWFueSAncmVhY3Rpb25zJwoKCiAgICBkZWZhdWx0VmFsdWVzKCkgewogICAgICByZXR1cm4gewogICAgICAgIHNob3J0QmlvOiAnJywKICAgICAgICBzaG9ydEJpb0Zvcm1hdDogJ2h0bWwnLAogICAgICAgIGZpbGVzOiBbXSwKICAgICAgICBpbWFnZUZpbGVzOiBbXSwKICAgICAgICBhdHRhY2htZW50czogW10sCiAgICAgICAgbGlua1ByZXZpZXdzOiBbXSwKICAgICAgICBsb2NhbGU6IEFwcENvbmZpZy5kZWZhdWx0TG9jYWxlLAogICAgICAgIGV4cGVyaWVuY2VzOiBbXSwKICAgICAgICBkYXRlVGltZVByZWY6ICdkYXlfaXNvJwogICAgICB9OwogICAgfQoKICAgIG5hbWVPckVtYWlsKCkgewogICAgICByZXR1cm4gdGhpcy5uYW1lIHx8IHRoaXMuZW1haWwgfHwgdGhpcy5wbGFjZWhvbGRlck5hbWU7CiAgICB9CgogICAgc2ltcGxlQmlvKCkgewogICAgICByZXR1cm4gX3RydW5jYXRlKCh0aGlzLnNob3J0QmlvIHx8ICcnKS5yZXBsYWNlKC88XC8/W14+XSsoPnwkKS9nLCAiIiksIHsKICAgICAgICBsZW5ndGg6IDcwCiAgICAgIH0pOwogICAgfQoKICAgIGxvY2FsZU5hbWUoKSB7CiAgICAgIHJldHVybiAoX2ZpbmQoQXBwQ29uZmlnLmxvY2FsZXMsIGggPT4gewogICAgICAgIHJldHVybiBoLmtleSA9PT0gdGhpcy5sb2NhbGU7CiAgICAgIH0pIHx8IHt9KS5uYW1lOwogICAgfQoKICAgIGFkbWluTWVtYmVyc2hpcHMoKSB7CiAgICAgIHJldHVybiB0aGlzLnJlY29yZFN0b3JlLm1lbWJlcnNoaXBzLmZpbmQoewogICAgICAgIHVzZXJJZDogdGhpcy5pZCwKICAgICAgICBhZG1pbjogdHJ1ZQogICAgICB9KTsKICAgIH0KCiAgICBncm91cElkcygpIHsKICAgICAgcmV0dXJuIF9tYXAodGhpcy5tZW1iZXJzaGlwcygpLCAnZ3JvdXBJZCcpOwogICAgfQoKICAgIGdyb3VwcygpIHsKICAgICAgcmV0dXJuIHRoaXMucmVjb3JkU3RvcmUuZ3JvdXBzLmNvbGxlY3Rpb24uY2hhaW4oKS5maW5kKHsKICAgICAgICBpZDogewogICAgICAgICAgJGluOiB0aGlzLmdyb3VwSWRzKCkKICAgICAgICB9LAogICAgICAgIGFyY2hpdmVkQXQ6IG51bGwKICAgICAgfSkuc2ltcGxlc29ydCgnZnVsbE5hbWUnKS5kYXRhKCk7CiAgICB9CgogICAgcGFydGljaXBhbnRJZHMoKSB7CiAgICAgIHJldHVybiBbXTsKICAgIH0KCiAgICBwYXJlbnRHcm91cHMoKSB7CiAgICAgIHJldHVybiBfZmlsdGVyKHRoaXMuZ3JvdXBzKCksIGZ1bmN0aW9uIChncm91cCkgewogICAgICAgIHJldHVybiAhZ3JvdXAucGFyZW50SWQ7CiAgICAgIH0pOwogICAgfQoKICAgIGluYm94R3JvdXBzKCkgewogICAgICByZXR1cm4gX2ZsYXR0ZW4oW3RoaXMucGFyZW50R3JvdXBzKCksIHRoaXMub3JwaGFuU3ViZ3JvdXBzKCldKTsKICAgIH0KCiAgICBhbGxUaHJlYWRzKCkgewogICAgICByZXR1cm4gX2ZsYXR0ZW4odGhpcy5ncm91cHMoKS5tYXAoZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgICAgcmV0dXJuIGdyb3VwLmRpc2N1c3Npb25zKCk7CiAgICAgIH0pKTsKICAgIH0KCiAgICBvcnBoYW5TdWJncm91cHMoKSB7CiAgICAgIHJldHVybiBfZmlsdGVyKHRoaXMuZ3JvdXBzKCksIGdyb3VwID0+IHsKICAgICAgICByZXR1cm4gZ3JvdXAucGFyZW50SWQgJiYgIWdyb3VwLnBhcmVudCgpLm1lbWJlcnNJbmNsdWRlKHRoaXMpOwogICAgICB9KTsKICAgIH0KCiAgICBvcnBoYW5QYXJlbnRzKCkgewogICAgICByZXR1cm4gX3VuaXEoX2NvbXBhY3QodGhpcy5vcnBoYW5TdWJncm91cHMoKS5tYXAoZnVuY3Rpb24gKGdyb3VwKSB7CiAgICAgICAgcmV0dXJuIGdyb3VwLnBhcmVudElkICYmIGdyb3VwLnBhcmVudCgpOwogICAgICB9KSkpOwogICAgfQoKICAgIG1lbWJlcnNoaXBGb3IoZ3JvdXApIHsKICAgICAgaWYgKCFncm91cCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucmVjb3JkU3RvcmUubWVtYmVyc2hpcHMuZmluZCh7CiAgICAgICAgZ3JvdXBJZDogZ3JvdXAuaWQsCiAgICAgICAgdXNlcklkOiB0aGlzLmlkCiAgICAgIH0pWzBdOwogICAgfQoKICAgIGZpcnN0TmFtZSgpIHsKICAgICAgaWYgKHRoaXMubmFtZSkgewogICAgICAgIHJldHVybiBfaGVhZCh0aGlzLm5hbWUuc3BsaXQoJyAnKSk7CiAgICAgIH0KICAgIH0KCiAgICBzYXZlVm9sdW1lKHZvbHVtZSwgYXBwbHlUb0FsbCkgewogICAgICB0aGlzLnByb2Nlc3NpbmcgPSB0cnVlOwogICAgICByZXR1cm4gdGhpcy5yZW1vdGUucG9zdCgnc2V0X3ZvbHVtZScsIHsKICAgICAgICB2b2x1bWU6IHZvbHVtZSwKICAgICAgICBhcHBseV90b19hbGw6IGFwcGx5VG9BbGwsCiAgICAgICAgdW5zdWJzY3JpYmVfdG9rZW46IHRoaXMudW5zdWJzY3JpYmVUb2tlbgogICAgICB9KS50aGVuKCgpID0+IHsKICAgICAgICBpZiAoIWFwcGx5VG9BbGwpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHRoaXMuYWxsVGhyZWFkcygpLmZvckVhY2goZnVuY3Rpb24gKHRocmVhZCkgewogICAgICAgICAgcmV0dXJuIHRocmVhZC51cGRhdGUoewogICAgICAgICAgICBkaXNjdXNzaW9uUmVhZGVyVm9sdW1lOiBudWxsCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gdGhpcy5tZW1iZXJzaGlwcygpLmZvckVhY2goZnVuY3Rpb24gKG1lbWJlcnNoaXApIHsKICAgICAgICAgIHJldHVybiBtZW1iZXJzaGlwLnVwZGF0ZSh7CiAgICAgICAgICAgIHZvbHVtZTogdm9sdW1lCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSkuZmluYWxseSgoKSA9PiB7CiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc2luZyA9IGZhbHNlOwogICAgICB9KTsKICAgIH0KCiAgICBoYXNFeHBlcmllbmNlZChrZXksIGdyb3VwKSB7CiAgICAgIGlmIChncm91cCAmJiB0aGlzLmlzTWVtYmVyT2YoZ3JvdXApKSB7CiAgICAgICAgcmV0dXJuIHRoaXMubWVtYmVyc2hpcEZvcihncm91cCkuZXhwZXJpZW5jZXNba2V5XTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5leHBlcmllbmNlc1trZXldOwogICAgICB9CiAgICB9CgogICAgdGl0bGUoZ3JvdXApIHsKICAgICAgcmV0dXJuIHRoaXMudGl0bGVzW2dyb3VwLmlkXSB8fCB0aGlzLnRpdGxlc1tncm91cC5wYXJlbnRJZF07CiAgICB9CgogICAgbmFtZVdpdGhUaXRsZShncm91cCkgewogICAgICB2YXIgbmFtZSwgdGl0bGVzOwogICAgICBuYW1lID0gdGhpcy5uYW1lT3JFbWFpbCgpOwoKICAgICAgaWYgKCFncm91cCkgewogICAgICAgIHJldHVybiBuYW1lOwogICAgICB9CgogICAgICB0aXRsZXMgPSB0aGlzLnRpdGxlcyB8fCB7fTsKICAgICAgcmV0dXJuIF9jb21wYWN0KFtuYW1lLCB0aXRsZXNbZ3JvdXAuaWRdIHx8IHRpdGxlc1tncm91cC5wYXJlbnRJZF1dKS5qb2luKCcgwrcgJyk7CiAgICB9CgogIH0KCiAgOwogIFVzZXJNb2RlbC5zaW5ndWxhciA9ICd1c2VyJzsKICBVc2VyTW9kZWwucGx1cmFsID0gJ3VzZXJzJzsKICBVc2VyTW9kZWwubGF6eUxvYWQgPSB0cnVlOwogIFVzZXJNb2RlbC51bmlxdWVJbmRpY2VzID0gWydpZCddOwogIHJldHVybiBVc2VyTW9kZWw7Cn0uY2FsbCh0aGlzKTs="},{"version":3,"sources":["/home/gustavo/Documents/tese/loomio/vue/src/shared/models/user_model.coffee"],"names":[],"mappings":"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","sourcesContent":["import BaseModel from '@/shared/record_store/base_model'\nimport AppConfig from '@/shared/services/app_config'\nimport { find, invokeMap, filter, flatten, uniq, head, compact, some, map, truncate  } from 'lodash'\n\nexport default class UserModel extends BaseModel\n  @singular: 'user'\n  @plural: 'users'\n  @lazyLoad: true\n  @uniqueIndices: ['id']\n\n  relationships: ->\n    @hasMany 'memberships'\n  #   @hasMany 'notifications'\n  #   @hasMany 'contacts'\n  #   @hasMany 'versions'\n  #   @hasMany 'reactions'\n\n  defaultValues: ->\n    shortBio: ''\n    shortBioFormat: 'html'\n    files: []\n    imageFiles: []\n    attachments: []\n    linkPreviews: []\n    locale: AppConfig.defaultLocale\n    experiences: []\n    dateTimePref: 'day_iso'\n\n  nameOrEmail: ->\n    @name || @email || @placeholderName\n\n  simpleBio: ->\n    truncate((@shortBio || '').replace(/<\\/?[^>]+(>|$)/g, \"\"), length: 70)\n\n  localeName: ->\n    (find(AppConfig.locales, (h) => h.key == @locale) or {}).name\n\n  adminMemberships: ->\n    @recordStore.memberships.find(userId: @id, admin: true)\n\n  groupIds: ->\n    map(@memberships(), 'groupId')\n\n  groups: ->\n    @recordStore.groups.collection.chain().\n      find(id: { $in: @groupIds() }, archivedAt: null).\n      simplesort('fullName').data()\n\n  participantIds: -> []\n  parentGroups: ->\n    filter @groups(), (group) -> !group.parentId\n\n  inboxGroups: ->\n    flatten [@parentGroups(), @orphanSubgroups()]\n\n  allThreads: ->\n    flatten @groups().map (group) ->\n      group.discussions()\n\n  orphanSubgroups: ->\n    filter @groups(), (group) =>\n      group.parentId and !group.parent().membersInclude(@)\n\n  orphanParents: ->\n    uniq compact @orphanSubgroups().map (group) ->\n      group.parentId && group.parent()\n\n  membershipFor: (group) ->\n    return unless group\n    @recordStore.memberships.find(groupId: group.id, userId: @id)[0]\n\n  firstName: ->\n    head @name.split(' ') if @name\n\n  saveVolume: (volume, applyToAll) ->\n    @processing = true\n    @remote.post('set_volume',\n      volume: volume\n      apply_to_all: applyToAll\n      unsubscribe_token: @unsubscribeToken\n    ).then =>\n      return unless applyToAll\n      @allThreads().forEach (thread) ->\n        thread.update(discussionReaderVolume: null)\n      @memberships().forEach (membership) ->\n        membership.update(volume: volume)\n    .finally =>\n      @processing = false\n\n  hasExperienced: (key, group) ->\n    if group && @isMemberOf(group)\n      @membershipFor(group).experiences[key]\n    else\n      @experiences[key]\n\n  title: (group) ->\n    @titles[group.id] || @titles[group.parentId]\n\n  nameWithTitle: (group) ->\n    name = @nameOrEmail()\n    return name unless group\n    titles = @titles || {}\n    compact([name, (titles[group.id] || titles[group.parentId])]).join(' · ')\n"],"sourceRoot":""}]}