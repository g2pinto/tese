{"remainingRequest":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js!/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js!/home/gustavo/Documents/tese/loomio/vue/src/shared/record_store/base_model.coffee","dependencies":[{"path":"/home/gustavo/Documents/tese/loomio/vue/src/shared/record_store/base_model.coffee","mtime":1706724415812},{"path":"/home/gustavo/Documents/tese/loomio/vue/.babelrc","mtime":1706724415792},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/cache-loader/dist/cjs.js","mtime":1706724497848},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js","mtime":1706724500796},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js","mtime":1706724497848}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/gustavo/Documents/tese/loomio/vue/src/shared/record_store/base_model.coffee"],"names":[],"mappings":"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","sourcesContent":["import utils from './utils'\nimport Vue from 'vue'\nimport { isEqual } from 'date-fns'\nimport { camelCase, union, each, isArray, keys, filter, snakeCase, defaults, orderBy, assign, includes, pick } from 'lodash'\n\nexport default class BaseModel\n  @singular: 'undefinedSingular'\n  @plural: 'undefinedPlural'\n\n  # indicate to Loki our 'primary keys' - it promises to make these fast to lookup by.\n  @uniqueIndices: ['id']\n\n  # list of other attributes to index\n  @indices: []\n\n  @searchableFields: []\n\n  # whitelist of attributes to include when serializing the record.\n  # leave null to serialize all attributes\n  @serializableAttributes: null\n\n  # what is the key to use when serializing the record?\n  @serializationRoot: null\n\n  constructor: (recordsInterface, attributes = {}) ->\n    @processing = false # not returning/throwing on already processing rn\n    @_version = 0\n    @attributeNames = []\n    @unmodified = {}\n    @afterUpdateFns = []\n    @saveDisabled = false\n    @saveFailed = false\n    @setErrors()\n    Object.defineProperty(@, 'recordsInterface', value: recordsInterface, enumerable: false)\n    Object.defineProperty(@, 'recordStore', value: recordsInterface.recordStore, enumerable: false)\n    Object.defineProperty(@, 'remote', value: recordsInterface.remote, enumerable: false)\n    @buildRelationships() if @relationships?\n    @update(@defaultValues())\n    @update(attributes)\n    @afterConstruction()\n\n  bumpVersion: ->\n    @_version = @_version + 1\n\n  afterConstruction: ->\n\n  defaultValues: -> {}\n\n  clone: ->\n    cloneAttributes = {}\n    each @attributeNames, (attr) =>\n      if isArray(@[attr])\n        cloneAttributes[attr] = @[attr].slice(0)\n      else\n        cloneAttributes[attr] = @[attr]\n      true\n    new @constructor(@recordsInterface, cloneAttributes)\n\n  inCollection: =>\n    @['$loki']\n\n  update: (attributes) ->\n    @baseUpdate(attributes)\n\n  afterUpdate: (fn) ->\n    @afterUpdateFns.push fn\n\n  baseUpdate: (attributes) ->\n    @bumpVersion()\n    @attributeNames = union @attributeNames, keys(attributes)\n    each attributes, (value, key) =>\n      @unmodified[key] = value\n      Vue.set(@, key, value)\n      true\n\n    @recordsInterface.collection.update(@) if @inCollection()\n\n    @afterUpdateFns.forEach (fn) => fn(@)\n\n  attributeIsModified: (attributeName) ->\n    original = @unmodified[attributeName]\n    current = @[attributeName]\n    if utils.isTimeAttribute(attributeName)\n      !(original == current or isEqual(original, current))\n    else\n      original != current && original != null && current != ''\n\n  modifiedAttributes: ->\n    filter @attributeNames, (name) =>\n      @attributeIsModified(name)\n\n  isModified: ->\n    @modifiedAttributes().length > 0\n\n  serialize: ->\n    @baseSerialize()\n\n  baseSerialize: ->\n    wrapper = {}\n    data = {}\n    paramKey = snakeCase(@constructor.serializationRoot or @constructor.singular)\n\n    data._destroy = @._destroy if @._destroy\n    each @constructor.serializableAttributes or @attributeNames, (attributeName) =>\n      snakeName = snakeCase(attributeName)\n      camelName = camelCase(attributeName)\n      if utils.isTimeAttribute(camelName) and @[camelName]\n        data[snakeName] = @[camelName].toISOString()\n      else\n        data[snakeName] = @[camelName]\n      true # so if the value is false we don't break the loop\n\n    wrapper[paramKey] = data\n    wrapper\n\n  relationships: ->\n\n  buildRelationships: ->\n    @views = {}\n    @relationships()\n\n  hasMany: (name, userArgs = {}) ->\n    args = defaults userArgs,\n      from: name\n      with: @constructor.singular + 'Id'\n      of: 'id'\n      find: {}\n\n    @[name] = =>\n      find = Object.assign({}, {\"#{args.with}\": @[args.of]},  args.find)\n      if userArgs.orderBy\n        orderBy @recordStore[args.from].find(find), userArgs.orderBy\n      else\n        @recordStore[args.from].find(find)\n\n  belongsTo: (name, userArgs) ->\n    values =\n      from: name + 's'\n      by: name + 'Id'\n\n    args = assign values, userArgs\n\n    @[name] = =>\n      if @[args.by]\n        return obj if obj = @recordStore[args.from].find(@[args.by])\n        if @constructor.lazyLoad\n          obj = @recordStore[args.from].create(id: @[args.by])\n          @recordStore[args.from].addMissing(@[args.by])\n          return obj\n      return @recordStore[args.from].nullModel()\n    @[name+'Is'] = (obj) => @recordStore[args.from].find(@[args.by]) == obj\n\n  belongsToPolymorphic: (name) ->\n    typeMap =\n      Group: 'groups'\n      Discussion: 'discussions'\n      Poll: 'polls'\n      Outcome: 'outcomes'\n      Stance: 'stances'\n      Comment: 'comments'\n      CommentVote: 'comments'\n      Membership: 'memberships'\n      MembershipRequest: 'membershipRequests'\n\n    @[name] = =>\n      typeColumn = \"#{name}Type\"\n      idColumn = \"#{name}Id\"\n      @recordStore[typeMap[@[typeColumn]]].find(@[idColumn])\n\n  translationOptions: ->\n\n  isA: (models...) ->\n    includes models, @constructor.singular\n\n  namedId: ->\n    { \"#{@constructor.singular}_id\": @id }\n\n  bestNamedId: ->\n    @namedId()\n\n  isNew: ->\n    not @id?\n\n  keyOrId: ->\n    if @key?\n      @key\n    else\n      @id\n\n  remove: =>\n    @beforeRemove()\n    if @inCollection()\n      @recordsInterface.collection.remove(@)\n\n  destroy: =>\n    @processing = true\n    @beforeDestroy()\n    @remove()\n    @remote.destroy(@keyOrId())\n    .finally =>\n      @processing = false\n\n  beforeDestroy: =>\n\n  beforeRemove: =>\n\n  discard: =>\n    @processing = true\n    @remote.discard(@keyOrId())\n    .finally =>\n      @processing = false\n\n  undiscard: =>\n    @processing = true\n    @remote.undiscard(@keyOrId())\n    .finally =>\n      @processing = false\n\n  beforeSave: -> true\n  beforeSaves: []\n\n  save: =>\n    @processing = true\n    @beforeSave()\n    @beforeSaves.forEach (f) => f()\n    \n    if @isNew()\n      @remote.create(@serialize())\n      .then(@saveSuccess, @saveError)\n      .finally => @processing = false\n    else\n      @remote.update(@keyOrId(), @serialize())\n      .then(@saveSuccess, @saveError)\n      .finally => @processing = false\n\n  saveSuccess: (data) =>\n    @saveFailed = false\n    @unmodified = pick(@, @attributeNames)\n    data\n\n  saveError: (data) =>\n    @saveFailed = true\n    @setErrors(data.errors)\n    throw data\n\n  discardChanges: ->\n    @attributeNames.forEach (key) =>\n      Vue.set(@, key, @unmodified[key])\n\n  setErrors: (errorList = []) ->\n    Vue.set(@, 'errors', {})\n    each errorList, (errors, key) =>\n      Vue.set(@errors, camelCase(key), errors)\n\n  isValid: ->\n    @errors.length > 0\n\n  edited: ->\n    @versionsCount > 1\n"],"sourceRoot":""}]}