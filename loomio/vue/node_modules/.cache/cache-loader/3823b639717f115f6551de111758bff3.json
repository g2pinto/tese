{"remainingRequest":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js!/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js!/home/gustavo/Documents/tese/loomio/vue/src/shared/services/range_set.coffee","dependencies":[{"path":"/home/gustavo/Documents/tese/loomio/vue/src/shared/services/range_set.coffee","mtime":1706724415812},{"path":"/home/gustavo/Documents/tese/loomio/vue/.babelrc","mtime":1706724415792},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/cache-loader/dist/cjs.js","mtime":1706724497848},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js","mtime":1706724500796},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js","mtime":1706724497848}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9pblJhbmdlIGZyb20gImxvZGFzaC9pblJhbmdlIjsKaW1wb3J0IF9zb3J0QnkgZnJvbSAibG9kYXNoL3NvcnRCeSI7CmltcG9ydCBfY29tcGFjdCBmcm9tICJsb2Rhc2gvY29tcGFjdCI7CmltcG9ydCBfc29tZSBmcm9tICJsb2Rhc2gvc29tZSI7CmltcG9ydCBfc3VtIGZyb20gImxvZGFzaC9zdW0iOwppbXBvcnQgX21hcCBmcm9tICJsb2Rhc2gvbWFwIjsKaW1wb3J0IF9tYXggZnJvbSAibG9kYXNoL21heCI7CmltcG9ydCBfbGFzdCBmcm9tICJsb2Rhc2gvbGFzdCI7CmltcG9ydCBfaXNFcXVhbCBmcm9tICJsb2Rhc2gvaXNFcXVhbCI7CmltcG9ydCBfZWFjaCBmcm9tICJsb2Rhc2gvZWFjaCI7CnZhciBSYW5nZVNldDsKZXhwb3J0IGRlZmF1bHQgbmV3IChSYW5nZVNldCA9IGNsYXNzIFJhbmdlU2V0IHsKICBwYXJzZShvdXRlcikgewogICAgcmV0dXJuIF9tYXAob3V0ZXIuc3BsaXQoJywnKSwgZnVuY3Rpb24gKHBhaXIpIHsKICAgICAgcmV0dXJuIF9tYXAocGFpci5zcGxpdCgnLScpLCBmdW5jdGlvbiAocykgewogICAgICAgIHJldHVybiBwYXJzZUludChzKTsKICAgICAgfSk7CiAgICB9KTsKICB9CgogIHNlcmlhbGl6ZShyYW5nZXMpIHsKICAgIHJldHVybiBfbWFwKHJhbmdlcywgZnVuY3Rpb24gKHJhbmdlKSB7CiAgICAgIHJldHVybiByYW5nZS5qb2luKCctJyk7CiAgICB9KS5qb2luKCcsJyk7CiAgfQoKICByZWR1Y2UocmFuZ2VzKSB7CiAgICB2YXIgcmVkdWNlZDsKICAgIHJhbmdlcyA9IF9zb3J0QnkocmFuZ2VzLCBmdW5jdGlvbiAocikgewogICAgICByZXR1cm4gclswXTsKICAgIH0pOwogICAgcmVkdWNlZCA9IF9jb21wYWN0KFtyYW5nZXMuc2hpZnQoKV0pOwoKICAgIF9lYWNoKHJhbmdlcywgZnVuY3Rpb24gKHIpIHsKICAgICAgdmFyIGxhc3RyOwogICAgICBsYXN0ciA9IF9sYXN0KHJlZHVjZWQpOwoKICAgICAgaWYgKGxhc3RyWzFdID49IHJbMF0gLSAxKSB7CiAgICAgICAgcmVkdWNlZC5wb3AoKTsKICAgICAgICByZXR1cm4gcmVkdWNlZC5wdXNoKFtsYXN0clswXSwgX21heChbclsxXSwgbGFzdHJbMV1dKV0pOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiByZWR1Y2VkLnB1c2gocik7CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiByZWR1Y2VkOwogIH0KCiAgbGVuZ3RoKHJhbmdlcykgewogICAgcmV0dXJuIF9zdW0oX21hcChyYW5nZXMsIGZ1bmN0aW9uIChyYW5nZSkgewogICAgICByZXR1cm4gcmFuZ2VbMV0gLSByYW5nZVswXSArIDE7CiAgICB9KSk7CiAgfQoKICBhcnJheVRvUmFuZ2VzKGFyeSkgewogICAgcmV0dXJuIHRoaXMucmVkdWNlKGFyeS5tYXAoZnVuY3Rpb24gKGlkKSB7CiAgICAgIHJldHVybiBbaWQsIGlkXTsKICAgIH0pKTsKICB9CgogIGludGVyc2VjdFJhbmdlcyhyZWFkUmFuZ2VzLCByYW5nZXMpIHsKICAgIC8vIHJlbW92ZSBhbnkgaXRlbXMgaW4gcmVhZFJhbmdlcyB0aGF0IGRvIG5vdCBleGlzdCBpbiByYW5nZXMKICAgIHJldHVybiB0aGlzLmFycmF5VG9SYW5nZXModGhpcy5yYW5nZXNUb0FycmF5KHJlYWRSYW5nZXMpLmZpbHRlcih2ID0+IHsKICAgICAgcmV0dXJuIHRoaXMuaW5jbHVkZXNWYWx1ZShyYW5nZXMsIHYpOwogICAgfSkpOwogIH0KCiAgcmFuZ2VzVG9BcnJheShyYW5nZXMpIHsKICAgIHZhciBsaXN0OwogICAgbGlzdCA9IFtdOwogICAgcmFuZ2VzLmZvckVhY2gocmFuZ2UgPT4gewogICAgICByZXR1cm4gbGlzdCA9IGxpc3QuY29uY2F0KHRoaXMucmFuZ2VUb0FycmF5KHJhbmdlWzBdLCByYW5nZVsxXSwgMSkpOwogICAgfSk7CiAgICByZXR1cm4gbGlzdDsKICB9IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2Zyb20KCgogIHJhbmdlVG9BcnJheShzdGFydCwgc3RvcCwgc3RlcCkgewogICAgcmV0dXJuIEFycmF5LmZyb20oewogICAgICBsZW5ndGg6IChzdG9wIC0gc3RhcnQpIC8gc3RlcCArIDEKICAgIH0sIGZ1bmN0aW9uIChfLCBpKSB7CiAgICAgIHJldHVybiBzdGFydCArIGkgKiBzdGVwOwogICAgfSk7CiAgfQoKICBvdmVybGFwcyhhLCBiKSB7CiAgICB2YXIgYWI7CiAgICBhYiA9IF9zb3J0QnkoW2EsIGJdLCBmdW5jdGlvbiAocikgewogICAgICByZXR1cm4gclswXTsKICAgIH0pOwogICAgcmV0dXJuIGFiWzBdWzFdID49IGFiWzFdWzBdOwogIH0KCiAgaW5jbHVkZXNWYWx1ZShyYW5nZXMsIHZhbHVlKSB7CiAgICByZXR1cm4gX3NvbWUocmFuZ2VzLCBmdW5jdGlvbiAocmFuZ2UpIHsKICAgICAgcmV0dXJuIF9pblJhbmdlKHZhbHVlLCByYW5nZVswXSwgcmFuZ2VbMV0gKyAxKTsKICAgIH0pOwogIH0gLy8gVE9ETzogZml4IG1lIGZvciBjb21wbGV4IHJhbmdlIHNldHMhCgoKICBzdWJ0cmFjdFJhbmdlKHdob2xlLCBwYXJ0KSB7CiAgICBpZiAocGFydC5sZW5ndGggPT09IDAgfHwgcGFydFswXSA+IHdob2xlWzFdIHx8IHBhcnRbMV0gPCB3aG9sZVswXSkgewogICAgICByZXR1cm4gW3dob2xlXTsKICAgIH0KCiAgICBpZiAocGFydFswXSA8PSB3aG9sZVswXSAmJiBwYXJ0WzFdID49IHdob2xlWzFdKSB7CiAgICAgIHJldHVybiBbXTsKICAgIH0KCiAgICBpZiAocGFydFswXSA+IHdob2xlWzBdICYmIHBhcnRbMV0gPCB3aG9sZVsxXSkgewogICAgICByZXR1cm4gW1t3aG9sZVswXSwgcGFydFswXSAtIDFdLCBbcGFydFsxXSArIDEsIHdob2xlWzFdXV07CiAgICB9CgogICAgaWYgKHBhcnRbMF0gPT09IHdob2xlWzBdICYmIHBhcnRbMV0gPCB3aG9sZVsxXSkgewogICAgICByZXR1cm4gW1twYXJ0WzFdICsgMSwgd2hvbGVbMV1dXTsKICAgIH0KCiAgICBpZiAocGFydFswXSA+IHdob2xlWzBdICYmIHBhcnRbMV0gPT09IHdob2xlWzFdKSB7CiAgICAgIHJldHVybiBbW3dob2xlWzBdLCBwYXJ0WzBdIC0gMV1dOwogICAgfQogIH0KCiAgc3VidHJhY3RSYW5nZXMod2hvbGVzLCBwYXJ0cykgewogICAgd2hvbGVzID0gdGhpcy5yZWR1Y2Uod2hvbGVzKTsKICAgIHBhcnRzID0gdGhpcy5yZWR1Y2UocGFydHMpOwogICAgcGFydHMuZm9yRWFjaChwYXJ0ID0+IHsKICAgICAgdmFyIG91dHB1dDsKICAgICAgb3V0cHV0ID0gW107CiAgICAgIHdob2xlcy5mb3JFYWNoKHdob2xlID0+IHsKICAgICAgICByZXR1cm4gb3V0cHV0ID0gb3V0cHV0LmNvbmNhdCh0aGlzLnN1YnRyYWN0UmFuZ2Uod2hvbGUsIHBhcnQpKTsKICAgICAgfSk7CiAgICAgIHJldHVybiB3aG9sZXMgPSB0aGlzLnJlZHVjZShvdXRwdXQpOwogICAgfSk7CiAgICByZXR1cm4gd2hvbGVzOwogIH0KCiAgc2VsZlRlc3QoKSB7CiAgICByZXR1cm4gewogICAgICBsZW5ndGgxOiB0aGlzLmxlbmd0aChbWzEsIDFdXSkgPT09IDEsCiAgICAgIGxlbmd0aDI6IHRoaXMubGVuZ3RoKFtbMSwgMl1dKSA9PT0gMiwKICAgICAgc2VyaWFsaXplOiB0aGlzLnNlcmlhbGl6ZShbWzEsIDJdLCBbNCwgNV1dKSA9PT0gIjEtMiw0LTUiLAogICAgICBwYXJzZTogX2lzRXF1YWwodGhpcy5wYXJzZSgiMS0yLDQtNSIpLCBbWzEsIDJdLCBbNCwgNV1dKSwKICAgICAgcmVkdWNlU2ltcGxlOiBfaXNFcXVhbCh0aGlzLnJlZHVjZShbWzEsIDFdXSksIFtbMSwgMV1dKSwKICAgICAgcmVkdWNlTWVyZ2U6IF9pc0VxdWFsKHRoaXMucmVkdWNlKFtbMSwgMl0sIFszLCA0XV0pLCBbWzEsIDRdXSksCiAgICAgIHJlZHVjZUVtcHR5OiBfaXNFcXVhbCh0aGlzLnJlZHVjZShbXSksIFtdKSwKICAgICAgc3VidHJhY3RXaG9sZTogX2lzRXF1YWwodGhpcy5zdWJ0cmFjdFJhbmdlKFsxLCAxXSwgWzEsIDFdKSwgW10pLAogICAgICBzdWJ0cmFjdE5vbmU6IF9pc0VxdWFsKHRoaXMuc3VidHJhY3RSYW5nZShbMSwgMV0sIFsyLCAyXSksIFtbMSwgMV1dKSwKICAgICAgc3VidHJhY3RMZWZ0OiBfaXNFcXVhbCh0aGlzLnN1YnRyYWN0UmFuZ2UoWzEsIDJdLCBbMSwgMV0pLCBbWzIsIDJdXSksCiAgICAgIHN1YnRyYWN0UmlnaHQ6IF9pc0VxdWFsKHRoaXMuc3VidHJhY3RSYW5nZShbMSwgMl0sIFsyLCAyXSksIFtbMSwgMV1dKSwKICAgICAgc3VidHJhY3RNaWRkbGU6IF9pc0VxdWFsKHRoaXMuc3VidHJhY3RSYW5nZShbMSwgM10sIFsyLCAyXSksIFtbMSwgMV0sIFszLCAzXV0pLAogICAgICBvdmVybGFwc05vbmU6IHRoaXMub3ZlcmxhcHMoWzEsIDJdLCBbMywgNF0pID09PSBmYWxzZSwKICAgICAgb3ZlcmxhcHNQYXJ0OiB0aGlzLm92ZXJsYXBzKFsxLCAyXSwgWzIsIDNdKSA9PT0gdHJ1ZSwKICAgICAgb3ZlcmxhcHNXaG9sZTogdGhpcy5vdmVybGFwcyhbMSwgMl0sIFsxLCAyXSkgPT09IHRydWUsCiAgICAgIHN1YnRyYWN0UmFuZ2VzMTogX2lzRXF1YWwodGhpcy5zdWJ0cmFjdFJhbmdlcyhbWzEsIDFdXSwgW1sxLCAxXV0pLCBbXSksCiAgICAgIHN1YnRyYWN0UmFuZ2VzMjogX2lzRXF1YWwodGhpcy5zdWJ0cmFjdFJhbmdlcyhbWzEsIDJdXSwgW1sxLCAxXV0pLCBbWzIsIDJdXSksCiAgICAgIHN1YnRyYWN0UmFuZ2VzMzogX2lzRXF1YWwodGhpcy5zdWJ0cmFjdFJhbmdlcyhbWzEsIDJdLCBbNCwgNl1dLCBbWzEsIDFdLCBbNSwgNV1dKSwgW1syLCAyXSwgWzQsIDRdLCBbNiwgNl1dKSwKICAgICAgc3VidHJhY3RSYW5nZXM0OiBfaXNFcXVhbCh0aGlzLnN1YnRyYWN0UmFuZ2VzKFtbMSwgMl0sIFs0LCA4XV0sIFtbNSwgNl0sIFs3LCA4XV0pLCBbWzEsIDJdLCBbNCwgNF1dKQogICAgfTsKICB9CgogIGhhcmRUZXN0KCkgewogICAgcmV0dXJuIHsKICAgICAgc3VidHJhY3RSYW5nZXM1OiBfaXNFcXVhbCh0aGlzLnN1YnRyYWN0UmFuZ2VzKQogICAgfTsKICB9Cgp9KSgpOw=="},{"version":3,"sources":["/home/gustavo/Documents/tese/loomio/vue/src/shared/services/range_set.coffee"],"names":[],"mappings":"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","sourcesContent":["import {each, isEqual, last, max, map, sum, some, filter, compact, sortBy, inRange} from 'lodash'\n\nexport default new class RangeSet\n  parse: (outer) ->\n    map(outer.split(','), (pair) -> map(pair.split('-'), (s) -> parseInt(s)))\n\n  serialize: (ranges) ->\n    map(ranges, (range) -> range.join('-')).join(',')\n\n  reduce: (ranges) ->\n    ranges = sortBy ranges, (r) -> r[0]\n    reduced = compact [ranges.shift()]\n    each ranges, (r) ->\n      lastr = last(reduced)\n      if lastr[1] >= (r[0] - 1)\n        reduced.pop()\n        reduced.push [lastr[0], max([r[1], lastr[1]])]\n      else\n        reduced.push r\n    reduced\n\n  length: (ranges) ->\n    sum map(ranges, (range) -> range[1] - range[0] + 1)\n\n  arrayToRanges: (ary) -> @reduce(ary.map (id) -> [id,id] )\n\n  intersectRanges: (readRanges, ranges) ->\n    # remove any items in readRanges that do not exist in ranges\n    @arrayToRanges(@rangesToArray(readRanges).filter (v) => @includesValue(ranges, v))\n\n  rangesToArray: (ranges) ->\n    list = []\n    ranges.forEach (range) =>\n      list = list.concat(@rangeToArray(range[0], range[1], 1))\n    list\n\n  # https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n  rangeToArray: (start, stop, step) ->\n    Array.from({length: (stop - start) / step + 1}, (_, i) -> start + (i * step))\n\n  overlaps: (a, b) ->\n    ab = sortBy [a, b], (r) -> r[0]\n    ab[0][1] >= ab[1][0]\n\n  includesValue: (ranges, value) ->\n    some ranges, (range) ->\n      inRange(value, range[0], range[1] + 1)\n\n  # TODO: fix me for complex range sets!\n  subtractRange: (whole, part) ->\n    return [whole]                                        if (part.length == 0) || (part[0] > whole[1]) || (part[1] < whole[0])\n    return []                                             if (part[0] <= whole[0]) && (part[1] >= whole[1])\n    return [[whole[0], part[0] - 1], [part[1] + 1, whole[1]]] if (part[0] >  whole[0]) && (part[1] <  whole[1])\n    return [[part[1] + 1, whole[1]]]                      if (part[0] == whole[0]) && (part[1] <  whole[1])\n    return [[whole[0], part[0] - 1]]                      if (part[0] >  whole[0]) && (part[1] == whole[1])\n\n  subtractRanges: (wholes, parts) ->\n    wholes = @reduce(wholes)\n    parts = @reduce(parts)\n\n    parts.forEach (part) =>\n      output = []\n      wholes.forEach (whole) =>\n        output = output.concat @subtractRange(whole, part)\n      wholes = @reduce(output)\n    wholes\n\n  selfTest: ->\n    length1:                 @length([[1,1]]) == 1\n    length2:                 @length([[1,2]]) == 2\n    serialize:               @serialize([[1,2], [4,5]]) == \"1-2,4-5\"\n    parse:           isEqual @parse(\"1-2,4-5\"),                 [[1,2],[4,5]]\n    reduceSimple:    isEqual @reduce([[1,1]]), [[1,1]]\n    reduceMerge:     isEqual @reduce([[1,2],[3,4]]),            [[1,4]]\n    reduceEmpty:     isEqual @reduce([]), []\n    subtractWhole:   isEqual @subtractRange([1,1], [1,1]),      []\n    subtractNone:    isEqual @subtractRange([1,1], [2,2]),      [[1,1]]\n    subtractLeft:    isEqual @subtractRange([1,2], [1,1]),      [[2,2]]\n    subtractRight:   isEqual @subtractRange([1,2], [2,2]),      [[1,1]]\n    subtractMiddle:  isEqual @subtractRange([1,3], [2,2]),      [[1,1], [3,3]]\n    overlapsNone:            @overlaps([1,2], [3,4]) == false\n    overlapsPart:            @overlaps([1,2], [2,3]) == true\n    overlapsWhole:           @overlaps([1,2], [1,2]) == true\n    subtractRanges1: isEqual @subtractRanges([[1,1]], [[1,1]]), []\n    subtractRanges2: isEqual @subtractRanges([[1,2]], [[1,1]]), [[2,2]]\n    subtractRanges3: isEqual @subtractRanges([[1,2], [4,6]], [[1,1], [5,5]]), [[2,2], [4,4], [6,6]]\n    subtractRanges4: isEqual @subtractRanges([[1,2], [4,8]], [[5,6], [7,8]]), [[1,2], [4,4]]\n\n  hardTest: ->\n    subtractRanges5: isEqual @subtractRanges\n"],"sourceRoot":""}]}