{"remainingRequest":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js!/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js!/home/gustavo/Documents/tese/loomio/vue/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!/home/gustavo/Documents/tese/loomio/vue/src/components/poll/common/choose_template.vue?vue&type=script&lang=coffee&","dependencies":[{"path":"/home/gustavo/Documents/tese/loomio/vue/src/components/poll/common/choose_template.vue","mtime":1706724415804},{"path":"/home/gustavo/Documents/tese/loomio/vue/.babelrc","mtime":1706724415792},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/cache-loader/dist/cjs.js","mtime":1706724497848},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js","mtime":1706724500796},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js","mtime":1706724497848},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/@vue/vue-loader-v15/lib/index.js","mtime":1706724499784}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IEFwcENvbmZpZyBmcm9tICdAL3NoYXJlZC9zZXJ2aWNlcy9hcHBfY29uZmlnJzsKaW1wb3J0IFNlc3Npb24gZnJvbSAnQC9zaGFyZWQvc2VydmljZXMvc2Vzc2lvbic7CmltcG9ydCBSZWNvcmRzIGZyb20gJ0Avc2hhcmVkL3NlcnZpY2VzL3JlY29yZHMnOwppbXBvcnQgRXZlbnRCdXMgZnJvbSAnQC9zaGFyZWQvc2VydmljZXMvZXZlbnRfYnVzJzsKaW1wb3J0IFBvbGxUZW1wbGF0ZVNlcnZpY2UgZnJvbSAnQC9zaGFyZWQvc2VydmljZXMvcG9sbF90ZW1wbGF0ZV9zZXJ2aWNlJzsKaW1wb3J0IHsgQ29udGFpbmVyTWl4aW4sIEhhbmRsZURpcmVjdGl2ZSB9IGZyb20gJ3Z1ZS1zbGlja3NvcnQnOwpleHBvcnQgZGVmYXVsdCB7CiAgZGlyZWN0aXZlczogewogICAgaGFuZGxlOiBIYW5kbGVEaXJlY3RpdmUKICB9LAogIHByb3BzOiB7CiAgICBkaXNjdXNzaW9uOiBPYmplY3QsCiAgICBncm91cDogT2JqZWN0CiAgfSwKICBkYXRhOiBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gewogICAgICBhbGVydDogIVNlc3Npb24udXNlcigpLmV4cGVyaWVuY2VzWydhbGVydE5ld1BvbGxUZW1wbGF0ZXMnXSwKICAgICAgaXNTb3J0aW5nOiBmYWxzZSwKICAgICAgcmV0dXJuVG86IFNlc3Npb24ucmV0dXJuVG8oKSwKICAgICAgZ3JvdXBzOiBbXSwKICAgICAgcG9sbFRlbXBsYXRlczogW10sCiAgICAgIGFjdGlvbnM6IHt9LAogICAgICBmaWx0ZXI6ICdwcm9wb3NhbCcsCiAgICAgIHNpbmdsZUxpc3Q6ICF0aGlzLmdyb3VwLmNhdGVnb3JpemVQb2xsVGVtcGxhdGVzLAogICAgICBmaWx0ZXJMYWJlbHM6IHsKICAgICAgICBwcm9wb3NhbDogJ2RlY2lzaW9uX3Rvb2xzX2NhcmQucHJvcG9zYWxfdGl0bGUnLAogICAgICAgIHBvbGw6ICdkZWNpc2lvbl90b29sc19jYXJkLnBvbGxfdGl0bGUnLAogICAgICAgIG1lZXRpbmc6ICdkZWNpc2lvbl90b29sc19jYXJkLm1lZXRpbmcnLAogICAgICAgIGFkbWluOiAnZ3JvdXBfcGFnZS5zZXR0aW5ncycsCiAgICAgICAgdGVtcGxhdGVzOiAndGVtcGxhdGVzLnRlbXBsYXRlcycKICAgICAgfQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uICgpIHsKICAgIFJlY29yZHMucmVtb3RlLmZldGNoKHsKICAgICAgcGF0aDogInBvbGxfdGVtcGxhdGVzIiwKICAgICAgcGFyYW1zOiB7CiAgICAgICAgZ3JvdXBfaWQ6IHRoaXMuZ3JvdXAuaWQKICAgICAgfQogICAgfSk7CiAgICBFdmVudEJ1cy4kb24oJ3NvcnRQb2xsVGVtcGxhdGVzJywgKCkgPT4gewogICAgICByZXR1cm4gdGhpcy5pc1NvcnRpbmcgPSB0cnVlOwogICAgfSk7CiAgICByZXR1cm4gdGhpcy53YXRjaFJlY29yZHMoewogICAgICBjb2xsZWN0aW9uczogWyJwb2xsVGVtcGxhdGVzIl0sCiAgICAgIHF1ZXJ5OiByZWNvcmRzID0+IHsKICAgICAgICByZXR1cm4gdGhpcy5xdWVyeSgpOwogICAgICB9CiAgICB9KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHF1ZXJ5OiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBwYXJhbXMsIHRlbXBsYXRlczsKICAgICAgdGVtcGxhdGVzID0gW107CgogICAgICBpZiAodGhpcy5ncm91cC5jYXRlZ29yaXplUG9sbFRlbXBsYXRlcykgewogICAgICAgIHBhcmFtcyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHN3aXRjaCAodGhpcy5maWx0ZXIpIHsKICAgICAgICAgICAgY2FzZSAncHJvcG9zYWwnOgogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwb2xsVHlwZTogewogICAgICAgICAgICAgICAgICAkaW46IFsncHJvcG9zYWwnLCAncXVlc3Rpb24nXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRpc2NhcmRlZEF0OiBudWxsCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGNhc2UgJ3BvbGwnOgogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwb2xsVHlwZTogewogICAgICAgICAgICAgICAgICAkaW46IFsnc2NvcmUnLCAncG9sbCcsICdyYW5rZWRfY2hvaWNlJywgJ2RvdF92b3RlJ10KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBkaXNjYXJkZWRBdDogbnVsbAogICAgICAgICAgICAgIH07CgogICAgICAgICAgICBjYXNlICdtZWV0aW5nJzoKICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcG9sbFR5cGU6IHsKICAgICAgICAgICAgICAgICAgJGluOiBbJ21lZXRpbmcnLCAnY291bnQnXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRpc2NhcmRlZEF0OiBudWxsCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGNhc2UgJ2FkbWluJzoKICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgZGlzY2FyZGVkQXQ6IHsKICAgICAgICAgICAgICAgICAgJG5lOiBudWxsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICB9LmNhbGwodGhpcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcGFyYW1zID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgc3dpdGNoICh0aGlzLmZpbHRlcikgewogICAgICAgICAgICBjYXNlICdhZG1pbic6CiAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGRpc2NhcmRlZEF0OiB7CiAgICAgICAgICAgICAgICAgICRuZTogbnVsbAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH07CgogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBkaXNjYXJkZWRBdDogbnVsbAogICAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgfS5jYWxsKHRoaXMpOwogICAgICB9CgogICAgICB0aGlzLnBvbGxUZW1wbGF0ZXMgPSBSZWNvcmRzLnBvbGxUZW1wbGF0ZXMuY29sbGVjdGlvbi5jaGFpbigpLmZpbmQoewogICAgICAgIGdyb3VwSWQ6IHRoaXMuZ3JvdXAuaWQgfHwgbnVsbAogICAgICB9KS5maW5kKHBhcmFtcykuc2ltcGxlc29ydCgncG9zaXRpb24nKS5kYXRhKCk7CiAgICAgIHRoaXMuYWN0aW9ucyA9IHt9OwogICAgICByZXR1cm4gdGhpcy5wb2xsVGVtcGxhdGVzLmZvckVhY2goKHBvbGxUZW1wbGF0ZSwgaSkgPT4gewogICAgICAgIHJldHVybiB0aGlzLmFjdGlvbnNbaV0gPSBQb2xsVGVtcGxhdGVTZXJ2aWNlLmFjdGlvbnMocG9sbFRlbXBsYXRlLCB0aGlzLmdyb3VwKTsKICAgICAgfSk7CiAgICB9LAogICAgY2xvbmVUZW1wbGF0ZTogZnVuY3Rpb24gKHRlbXBsYXRlKSB7CiAgICAgIHZhciBwb2xsOwogICAgICBwb2xsID0gdGVtcGxhdGUuYnVpbGRQb2xsKCk7CgogICAgICBpZiAodGhpcy5kaXNjdXNzaW9uKSB7CiAgICAgICAgcG9sbC5kaXNjdXNzaW9uSWQgPSB0aGlzLmRpc2N1c3Npb24uaWQ7CiAgICAgICAgcG9sbC5ncm91cElkID0gdGhpcy5kaXNjdXNzaW9uLmdyb3VwSWQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHRoaXMuZ3JvdXApIHsKICAgICAgICAgIHBvbGwuZ3JvdXBJZCA9IHRoaXMuZ3JvdXAuaWQ7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gdGhpcy4kZW1pdCgnc2V0UG9sbCcsIHBvbGwpOwogICAgfSwKICAgIHNvcnRFbmRlZDogZnVuY3Rpb24gKCkgewogICAgICB0aGlzLmlzU29ydGluZyA9IGZhbHNlOwogICAgICByZXR1cm4gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgdmFyIGlkczsKICAgICAgICBpZHMgPSB0aGlzLnBvbGxUZW1wbGF0ZXMubWFwKHAgPT4gewogICAgICAgICAgcmV0dXJuIHAuaWQgfHwgcC5rZXk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIFJlY29yZHMucmVtb3RlLnBvc3QoJ3BvbGxfdGVtcGxhdGVzL3Bvc2l0aW9ucycsIHsKICAgICAgICAgIGdyb3VwX2lkOiB0aGlzLmdyb3VwLmlkLAogICAgICAgICAgaWRzOiBpZHMKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwKICB3YXRjaDogewogICAgYWxlcnQ6IGZ1bmN0aW9uICh2YWwpIHsKICAgICAgcmV0dXJuIFJlY29yZHMudXNlcnMuc2F2ZUV4cGVyaWVuY2UoJ2FsZXJ0TmV3UG9sbFRlbXBsYXRlcycsIHRydWUpOwogICAgfSwKICAgIGZpbHRlcjogJ3F1ZXJ5JywKICAgIHNpbmdsZUxpc3Q6IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgIHRoaXMuZ3JvdXAuY2F0ZWdvcml6ZVBvbGxUZW1wbGF0ZXMgPSAhdGhpcy5zaW5nbGVMaXN0OwogICAgICAgIHJldHVybiBSZWNvcmRzLnJlbW90ZS5wb3N0KCdwb2xsX3RlbXBsYXRlcy9zZXR0aW5ncycsIHsKICAgICAgICAgIGdyb3VwX2lkOiB0aGlzLmdyb3VwLmlkLAogICAgICAgICAgY2F0ZWdvcml6ZV9wb2xsX3RlbXBsYXRlczogdGhpcy5ncm91cC5jYXRlZ29yaXplUG9sbFRlbXBsYXRlcwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICBmaWx0ZXJzOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciB1c2VySXNBZG1pbjsKICAgICAgdXNlcklzQWRtaW4gPSB0aGlzLmdyb3VwLmFkbWluc0luY2x1ZGUoU2Vzc2lvbi51c2VyKCkpOwoKICAgICAgaWYgKHRoaXMuc2luZ2xlTGlzdCkgewogICAgICAgIGlmICh1c2VySXNBZG1pbikgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdGVtcGxhdGVzOiAnbWRpLXRodW1icy11cC1kb3duJywKICAgICAgICAgICAgYWRtaW46ICdtZGktY29nJwogICAgICAgICAgfTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIHt9OwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodXNlcklzQWRtaW4pIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHByb3Bvc2FsOiAnbWRpLXRodW1icy11cC1kb3duJywKICAgICAgICAgICAgcG9sbDogJ21kaS1wb2xsJywKICAgICAgICAgICAgbWVldGluZzogJ21kaS1jYWxlbmRhcicsCiAgICAgICAgICAgIGFkbWluOiAnbWRpLWNvZycKICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHByb3Bvc2FsOiAnbWRpLXRodW1icy11cC1kb3duJywKICAgICAgICAgICAgcG9sbDogJ21kaS1wb2xsJywKICAgICAgICAgICAgbWVldGluZzogJ21kaS1jYWxlbmRhcicKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/home/gustavo/Documents/tese/loomio/vue/src/components/poll/common/choose_template.vue"],"names":[],"mappings":"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","sourcesContent":["\nimport AppConfig    from '@/shared/services/app_config'\nimport Session      from '@/shared/services/session'\nimport Records      from '@/shared/services/records'\nimport EventBus     from '@/shared/services/event_bus'\nimport PollTemplateService     from '@/shared/services/poll_template_service'\nimport {map, without, compact} from 'lodash'\nimport { ContainerMixin, HandleDirective } from 'vue-slicksort'\n\nexport default\n  directives:\n    handle: HandleDirective\n\n  props:\n    discussion: Object\n    group: Object\n\n  data: ->\n    alert: !Session.user().experiences['alertNewPollTemplates']\n    isSorting: false\n    returnTo: Session.returnTo()\n    groups: []\n    pollTemplates: []\n    actions: {}\n    filter: 'proposal'\n    singleList: !@group.categorizePollTemplates\n    filterLabels:\n      proposal: 'decision_tools_card.proposal_title'\n      poll: 'decision_tools_card.poll_title'\n      meeting: 'decision_tools_card.meeting'\n      admin: 'group_page.settings'\n      templates: 'templates.templates'\n\n  created: ->\n    Records.remote.fetch(path: \"poll_templates\", params: {group_id: @group.id})\n    EventBus.$on 'sortPollTemplates', => @isSorting = true\n\n    @watchRecords\n      collections: [\"pollTemplates\"]\n      query: (records) => @query()\n\n  methods:\n    query: ->\n      templates = []\n      if @group.categorizePollTemplates\n        params = switch @filter\n          when 'proposal'\n            {pollType: {$in: ['proposal', 'question']}, discardedAt: null}\n          when 'poll'\n            {pollType: {$in: ['score', 'poll', 'ranked_choice', 'dot_vote']}, discardedAt: null}\n          when 'meeting'\n            {pollType: {$in: ['meeting', 'count']}, discardedAt: null}\n          when 'admin'\n            {discardedAt: {$ne: null}}\n      else\n        params = switch @filter\n          when 'admin'\n            {discardedAt: {$ne: null}}\n          else\n            {discardedAt: null}\n\n      @pollTemplates = Records.pollTemplates.collection.chain().\n        find(groupId: @group.id || null).\n        find(params).\n        simplesort('position').data()\n\n      @actions = {}\n      @pollTemplates.forEach (pollTemplate, i) =>\n        @actions[i] = PollTemplateService.actions(pollTemplate, @group)\n\n    cloneTemplate: (template) ->\n      poll = template.buildPoll()\n      if @discussion\n        poll.discussionId = @discussion.id \n        poll.groupId = @discussion.groupId\n      else\n        poll.groupId = @group.id if @group\n      @$emit('setPoll', poll)\n\n    sortEnded: ->\n      @isSorting = false\n      setTimeout =>\n        ids = @pollTemplates.map (p) => p.id || p.key\n        Records.remote.post('poll_templates/positions', group_id: @group.id, ids: ids)\n\n  watch:\n    alert: (val) ->\n      Records.users.saveExperience('alertNewPollTemplates', true)\n\n    filter: 'query'\n    singleList: ->\n      setTimeout =>\n        @group.categorizePollTemplates = !@singleList\n        Records.remote.post('poll_templates/settings', {group_id: @group.id, categorize_poll_templates: @group.categorizePollTemplates})\n\n  computed:\n    filters: ->\n      userIsAdmin = @group.adminsInclude(Session.user())\n      if @singleList \n        if userIsAdmin\n          {templates: 'mdi-thumbs-up-down', admin: 'mdi-cog'}\n        else\n          {}\n      else\n        if userIsAdmin\n          proposal: 'mdi-thumbs-up-down'\n          poll: 'mdi-poll'\n          meeting: 'mdi-calendar'\n          admin: 'mdi-cog'\n        else\n          proposal: 'mdi-thumbs-up-down'\n          poll: 'mdi-poll'\n          meeting: 'mdi-calendar'\n"],"sourceRoot":""}]}