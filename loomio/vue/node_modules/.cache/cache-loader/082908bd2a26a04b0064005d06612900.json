{"remainingRequest":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js!/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js!/home/gustavo/Documents/tese/loomio/vue/src/shared/loaders/thread_loader.coffee","dependencies":[{"path":"/home/gustavo/Documents/tese/loomio/vue/src/shared/loaders/thread_loader.coffee","mtime":1706724415808},{"path":"/home/gustavo/Documents/tese/loomio/vue/.babelrc","mtime":1706724415792},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/cache-loader/dist/cjs.js","mtime":1706724497848},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js","mtime":1706724500796},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js","mtime":1706724497848}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/gustavo/Documents/tese/loomio/vue/src/shared/loaders/thread_loader.coffee"],"names":[],"mappings":";;;;;;;AAAA,IAAA,YAAA;AAAA,OAAA,OAAA,MAAA,2BAAA;AAEA,OAAA,GAAA,MAAA,KAAA;AACA,OAAA,QAAA,MAAA,6BAAA;AACA,OAAA,QAAA,MAAA,6BAAA;AACA,OAAA,OAAA,MAAA,2BAAA;AAEA,eAAqB,YAAA,GAAN,MAAA,YAAA,CAAA;AACb,EAAA,WAAa,CAAA,UAAA,EAAA;AACX,SAAA,UAAA,GAAc,UAAd;AACA,SAAA,KAAA;AAFW;;AAIb,EAAA,KAAO,GAAA;AACL,SAAA,UAAA,GAAc,GAAG,CAAH,UAAA,CAAA,EAAA,CAAd;AACA,SAAA,KAAA,GAAS,EAAT;AACA,SAAA,WAAA,GAAe,EAAf;AACA,SAAA,YAAA,GAAgB,EAAhB;AACA,SAAA,UAAA,GAAc,WAAU,KAAC,UAAD,CAAV,UAAA,CAAd;AACA,SAAA,UAAA,GAAc,EAAd;AACA,SAAA,WAAA,GAAe,EAAf;AACA,SAAA,SAAA,GAAa,GAAG,CAAH,UAAA,CAAA,EAAA,CAAb;AACA,SAAA,OAAA,GAAW,KAAX;AACA,SAAA,OAAA,GAAW,EAAX;WACA,KAAA,eAAA,GAAmB,E;AAXd;;AAaP,EAAA,qBAAuB,GAAA;WACrB,CAAC,QAAQ,CAAR,cAAA,CAAwB,KAAC,UAAD,CAAxB,MAAA,EAA4C,KAA5C,UAAA,EAAA,CAAA,KAAD,EAAA,EAAmE,CAAnE,C;AADqB;;AAGvB,EAAA,UAAY,CAAA,SAAA,EAAA,KAAA,EAAA;AACV,QAAA,SAAA,EAAA;AAAA,MAAA,KAAK,CAAL,UAAA;;;AACA,SAAC,WAAD,CAAa,KAAK,CAAlB,WAAA,IAAkC,SAAlC;WACA,QAAQ,CAAR,KAAA,CAAA,aAAA,EAA8B,MAAM,CAAN,IAAA,CAAY,KAAZ,WAAA,EAAA,MAAA,CAAiC,GAAA,IAAA;aAAS,KAAC,WAAD,CAAY,GAAZ,C;AAA1C,KAAA,EAA9B,IAA8B,EAA9B,C;AAHU;;AAKZ,EAAA,QAAU,CAAA,KAAA,EAAA;AACR,IAAA,MAAM,CAAN,IAAA,CAAY,KAAZ,WAAA,EAAA,OAAA,CAAkC,GAAA,IAAA;AAChC,UAA6B,GAAG,CAAH,UAAA,CAAe,KAAK,CAAjD,WAA6B,CAA7B,EAAA;eAAA,KAAC,WAAD,CAAA,GAAA,IAAA,K;;AADF,KAAA;WAEA,GAAG,CAAH,GAAA,CAAQ,KAAR,SAAA,EAAoB,KAAK,CAAzB,EAAA,EAAA,IAAA,C;AAHQ;;AAKV,EAAA,QAAU,CAAA,KAAA,EAAA;AACR,QAAG,KAAK,CAAL,IAAA,KAAH,gBAAA,EAAA;aACE,KAAC,UAAD,CAAA,SAAA,GAAwB,KAAC,UAAD,CAD1B,U;AAAA,KAAA,MAAA;aAGE,CAAC,QAAQ,CAAR,aAAA,CAAuB,KAAvB,UAAA,EAAoC,KAAK,CAH5C,UAGG,C;;AAJK;;AAMV,EAAA,kBAAoB,CAAA,EAAA,EAAA;AAClB,QAAG,EAAA,KAAH,CAAA,EAAA;aACE,KAAC,UAAD,CAAA,SAAA,GAAwB,KAAC,UAAD,CAD1B,U;AAAA,KAAA,MAAA;aAGE,CAAC,QAAQ,CAAR,aAAA,CAAuB,KAAvB,UAAA,EAHH,EAGG,C;;AAJe;;AAMpB,EAAA,MAAQ,CAAA,KAAA,EAAA;WACN,GAAG,CAAH,GAAA,CAAQ,KAAR,SAAA,EAAoB,KAAK,CAAzB,EAAA,EAAA,KAAA,C;AADM;;AAGR,EAAA,cAAgB,GAAA;AACd,SAAA,sBAAA;WACA,KAAA,KAAA,E;AAFc;;AAIhB,EAAA,YAAc,GAAA;AACZ,SAAA,sBAAA;WACA,KAAA,KAAA,E;AAFY;;AAId,EAAA,YAAc,GAAA;AACZ,SAAA,iBAAA;WACA,KAAA,KAAA,E;AAFY;;AAId,EAAA,gBAAkB,CAAA,EAAA,EAAA;AAChB,SAAA,qBAAA,CAAA,EAAA;WACA,KAAA,KAAA,E;AAFgB;;AAIlB,EAAA,cAAgB,GAAA;AACd,SAAA,OAAA,GAAW,IAAX;WACA,KAAA,eAAA,CACE;AAAA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAY;AAA1B;AADF,OADF;AAGA,MAAA,MAAA,EACE;AAAA,QAAA,aAAA,EAAe,KAAC,UAAD,CAAf,EAAA;AACA,QAAA,GAAA,EAAK;AADL;AAJF,KADF,C;AAFc;;AAUhB,EAAA,aAAe,CAAA,GAAA,EAAA;AACb,QAAI,CAAC,KAAC,UAAD,CAAD,WAAA,IAA4B,GAAG,CAAC,KAAJ,CAAA,KAAA,KAA7B,CAAA,IAAuD,GAAG,CAAH,iBAAA,IAAyB,GAAG,CAAH,iBAAA,GAAwB,KAA3G,eAAA,EAAA;aACE,KAAA,SAAA,CAAW,GAAG,CADhB,KACE,C;;AAFW;;AAIf,EAAA,YAAc,CAAA,KAAA,EAAA;AACZ,SAAA,mBAAA,CAAA,KAAA;WACA,KAAA,KAAA,E;AAFY;;AAId,EAAA,SAAW,CAAA,KAAA,EAAA;AACT,SAAA,gBAAA,CAAA,KAAA;WACA,KAAA,KAAA,E;AAFS;;AAIX,EAAA,cAAgB,CAAA,GAAA,EAAA;AACd,QAAI,KAAC,UAAD,CAAA,WAAA,IAA2B,GAAG,CAAC,KAAJ,CAAA,KAAA,KAA5B,CAAA,IAAsD,GAAG,CAAH,mBAAA,IAA2B,GAAG,CAAH,mBAAA,GAA0B,KAA9G,eAAA,EAAA;aACE,KAAA,UAAA,CAAY,GAAG,CADjB,KACE,C;;AAFY;;AAIhB,EAAA,UAAY,CAAA,KAAA,EAAA;AACV,SAAA,OAAA,GAAW,WAAS,KAAK,CAAC,EAA1B;AACA,SAAA,iBAAA,CAAA,KAAA;WACA,KAAA,KAAA,E;AAHU;;AAKZ,EAAA,gBAAkB,CAAA,KAAA,EAAA;WAChB,KAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAM,cAAc,KAAK,CAAnB,WAAN,EAAA;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAd,EAAA;AACA,UAAA,WAAA,EACE;AAAA,YAAA,IAAA,EAAM,KAAK,CAAC;AAAZ;AAFF,SADF;AAIA,QAAA,UAAA,EAJA,aAAA;AAKA,QAAA,KAAA,EAAO,KAAC;AALR,OAFF;AAQA,MAAA,MAAA,EACE;AAAA,QAAA,aAAA,EAAe,KAAC,UAAD,CAAf,EAAA;AACA,QAAA,eAAA,EAAiB,KAAK,CADtB,WAAA;AAEA,QAAA,QAAA,EAFA,cAAA;AAGA,QAAA,GAAA,EAAK,KAAC;AAHN;AATF,KADF,C;AADgB;;AAgBlB,EAAA,iBAAmB,CAAA,KAAA,EAAA;WACjB,KAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAM,eAAe,KAAK,CAApB,WAAN,EAAA;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAd,EAAA;AACA,UAAA,WAAA,EACE;AAAA,YAAA,IAAA,EAAM,KAAK,CAAC;AAAZ;AAFF,SADF;AAIA,QAAA,UAAA,EAJA,aAAA;AAKA,QAAA,cAAA,EALA,IAAA;AAMA,QAAA,KAAA,EAAO,KAAC;AANR,OAFF;AASA,MAAA,MAAA,EACE;AAAA,QAAA,aAAA,EAAe,KAAC,UAAD,CAAf,EAAA;AACA,QAAA,eAAA,EAAiB,KAAK,CADtB,WAAA;AAEA,QAAA,QAAA,EAFA,cAAA;AAGA,QAAA,UAAA,EAHA,CAAA;AAIA,QAAA,GAAA,EAAK,KAAC;AAJN;AAVF,KADF,C;AADiB;;AAkBnB,EAAA,mBAAqB,CAAA,KAAA,EAAA;WACnB,KAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAM,iBAAiB,KAAK,CAAtB,WAAN,EAAA;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAd,EAAA;AACA,UAAA,QAAA,EAAU,KAAK,CAAC;AADhB,SADF;AAGA,QAAA,UAAA,EAHA,aAAA;AAIA,QAAA,cAAA,EAJA,IAAA;AAKA,QAAA,KAAA,EAAO,KAAC;AALR,OAFF;AAQA,MAAA,MAAA,EACE;AAAA,QAAA,aAAA,EAAe,KAAC,UAAD,CAAf,EAAA;AACA,QAAA,SAAA,EAAW,KAAK,CADhB,EAAA;AAEA,QAAA,QAAA,EAFA,cAAA;AAGA,QAAA,UAAA,EAHA,CAAA;AAIA,QAAA,GAAA,EAAK,KAAC;AAJN;AATF,KADF,C;AADmB;;AAiBrB,EAAA,kBAAoB,CAAA,SAAA,EAAA;WAClB,KAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAA,kBAAA;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAd,EAAA;AACA,UAAA,WAAA,EADA,SAAA;AAEA,UAAA,aAAA,EAAe;AAFf;AADF,OAFF;AAMA,MAAA,MAAA,EACE;AAAA,QAAA,KAAA,EAAA,aAAA;AACA,QAAA,aAAA,EAAe,KAAC,UAAD,CADf,EAAA;AAEA,QAAA,UAAA,EAAY;AAFZ;AAPF,KADF,C;AADkB;;AAapB,EAAA,mBAAqB,CAAA,QAAA,EAAA;WACnB,KAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAA,mBAAA;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAd,EAAA;AACA,UAAA,KAAA,EADA,CAAA;AAEA,UAAA,QAAA,EAAU;AAAC,YAAA,IAAA,EAAM;AAAP;AAFV,SADF;AAIA,QAAA,UAAA,EAJA,aAAA;AAKA,QAAA,KAAA,EAAO,KAAC;AALR,OAFF;AAQA,MAAA,MAAA,EACE;AAAA,QAAA,aAAA,EAAe,KAAC,UAAD,CAAf,EAAA;AACA,QAAA,4BAAA,EADA,QAAA;AAEA,QAAA,KAAA,EAAO;AAFP;AATF,KADF,C;AADmB;;AAerB,EAAA,sBAAwB,CAAA,WAAA,EAAA;AACtB,SAAA,OAAA,GAAW,WAAX;AACA,SAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAA,sBAAA;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAd,EAAA;AACA,UAAA,WAAA,EAAa;AAAC,YAAA,KAAA,EAAO;AAAR;AADb,SADF;AAGA,QAAA,UAAA,EAHA,aAAA;AAIA,QAAA,KAAA,EAAO,QAAA,CAAS,KAAA,OAAA,GAAT,CAAA;AAJP,OAFF;AAOA,MAAA,MAAA,EACE;AAAA,QAAA,aAAA,EAAe,KAAC,UAAD,CAAf,EAAA;AACA,QAAA,gBAAA,EADA,WAAA;AAEA,QAAA,QAAA,EAFA,cAAA;AAGA,QAAA,GAAA,EAAK,QAAA,CAAS,KAAA,OAAA,GAAT,CAAA;AAHL;AARF,KADF;WAcA,KAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAA,sBAAA;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAd,EAAA;AACA,UAAA,WAAA,EAAa;AAAC,YAAA,IAAA,EAAM;AAAP;AADb,SADF;AAGA,QAAA,UAAA,EAHA,aAAA;AAIA,QAAA,cAAA,EAJA,IAAA;AAKA,QAAA,KAAA,EAAO,QAAA,CAAS,KAAA,OAAA,GAAT,CAAA;AALP,OAFF;AAQA,MAAA,MAAA,EACE;AAAA,QAAA,aAAA,EAAe,KAAC,UAAD,CAAf,EAAA;AACA,QAAA,eAAA,EADA,WAAA;AAEA,QAAA,QAAA,EAFA,cAAA;AAGA,QAAA,UAAA,EAHA,CAAA;AAIA,QAAA,GAAA,EAAK,QAAA,CAAS,KAAA,OAAA,GAAT,CAAA;AAJL;AATF,KADF,C;AAhBsB;;AAgCxB,EAAA,qBAAuB,CAAA,UAAA,EAAA;AACzB,QAAA,EAAA;AAAI,IAAA,EAAA,GAAK,KAAI,CAAC,QAAA,CAAA,UAAA,CAAA,GAAuB,QAAA,CAAS,KAAA,OAAA,GAAjC,CAAwB,CAAxB,EAAJ,CAAI,CAAJ,CAAL;AACA,SAAA,OAAA,GAAW,EAAX;WACA,KAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAA,qBAAA;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAd,EAAA;AACA,UAAA,UAAA,EAAY;AAAC,qBAAS;AAAV;AADZ,SADF;AAGA,QAAA,UAAA,EAHA,YAAA;AAIA,QAAA,KAAA,EAAO,KAAC;AAJR,OAFF;AAOA,MAAA,MAAA,EACE;AAAA,QAAA,eAAA,EAAA,EAAA;AACA,QAAA,aAAA,EAAe,KAAC,UAAD,CADf,EAAA;AAEA,QAAA,KAAA,EAFA,aAAA;AAGA,QAAA,GAAA,EAAK,KAAC;AAHN;AARF,KADF,C;AAHqB;;AAiBvB,EAAA,iBAAmB,GAAA;WACjB,KAAA,OAAA,CACE;AAAA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAY;AAA1B,SADF;AAEA,QAAA,UAAA,EAFA,YAAA;AAGA,QAAA,cAAA,EAHA,IAAA;AAIA,QAAA,KAAA,EAAO,KAAC;AAJR,OADF;AAMA,MAAA,MAAA,EACE;AAAA,QAAA,aAAA,EAAe,KAAC,UAAD,CAAf,EAAA;AACA,QAAA,QAAA,EADA,aAAA;AAEA,QAAA,UAAA,EAFA,IAAA;AAGA,QAAA,GAAA,EAAK,KAAC;AAHN;AAPF,KADF,C;AADiB;;AAcnB,EAAA,cAAgB,GAAA;WACd,KAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAA,SAAA;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,EAAA,EAAI,KAAC,UAAD,CAAA,YAAA,GAA2B;AAA/B;AADF;AAFF,KADF,C;AADc;;AAOhB,EAAA,iBAAmB,GAAA;WACjB,KAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAA,QAAA;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAY;AAA1B,SADF;AAEA,QAAA,UAAA,EAFA,YAAA;AAGA,QAAA,KAAA,EAAO,KAAC;AAHR,OAFF;AAMA,MAAA,MAAA,EACE;AAAA,QAAA,aAAA,EAAe,KAAC,UAAD,CAAf,EAAA;AACA,QAAA,QAAA,EADA,aAAA;AAEA,QAAA,GAAA,EAAK,KAAC;AAFN;AAPF,KADF,C;AADiB;;AAanB,EAAA,iBAAmB,GAAA;AACrB,QAAA,EAAA;;AAAI,QAAG,KAAC,UAAD,CAAA,SAAA,GAAwB,KAAC,UAAD,CAA3B,UAAA,EAAA;AACE,WAAA,OAAA,CACE;AAAA,QAAA,IAAA,EAAA,iBAAA;AACA,QAAA,KAAA,EACE;AAAA,UAAA,IAAA,EACE;AAAA,YAAA,EAAA,EAAI,KAAC,UAAD,CAAA,YAAA,GAA2B;AAA/B;AADF;AAFF,OADF;;;AAMF,IAAA,EAAA,GAAK,KAAI,CAAC,KAAA,qBAAA,KAA2B,QAAA,CAAS,KAAA,OAAA,GAArC,CAA4B,CAA5B,EAAkD,KAAC,UAAD,CAAtD,eAAsD,EAAlD,CAAJ,CAAL;WACA,KAAA,OAAA,CACE;AAAA,MAAA,IAAA,EAAM;AAAC,QAAA,IAAA,EAAM;AAAP,OAAN;AACA,MAAA,KAAA,EACE;AAAA,QAAA,IAAA,EACE;AAAA,UAAA,YAAA,EAAc,KAAC,UAAD,CAAd,EAAA;AACA,UAAA,UAAA,EAAY;AAAC,YAAA,KAAA,EAAO;AAAR;AADZ,SADF;AAGA,QAAA,KAAA,EAAO,KAHP,OAAA;AAIA,QAAA,KAAA,EAAO;AAJP,OAFF;AAOA,MAAA,MAAA,EACE;AAAA,QAAA,aAAA,EAAe,KAAC,UAAD,CAAf,EAAA;AACA,QAAA,eAAA,EADA,EAAA;AAEA,QAAA,QAAA,EAFA,aAAA;AAGA,QAAA,GAAA,EAAK,KAAC;AAHN;AARF,KADF,C;AATiB;;AAuBnB,EAAA,OAAS,CAAA,IAAA,EAAA;AACX,QAAA,UAAA;AAAI,IAAA,UAAA,GAAa,IAAI,CAAJ,SAAA,CAAA,IAAA,CAAb;;AAEA,QAAG,CAAC,KAAC,WAAD,CAAA,QAAA,CAAJ,UAAI,CAAJ,EAAA;AACE,WAAC,KAAD,CAAA,IAAA,CAAA,IAAA;AACA,WAAC,WAAD,CAAA,IAAA,CADN,UACM,EAFF,C;;;;aAAA,I;AAAA,KAAA,MAAA;aAAA,K;;AAHO;;AAaT,EAAA,eAAiB,CAAA,IAAA,EAAA;AACf,QAAY,KAAA,OAAA,CAAZ,IAAY,CAAZ,EAAA;aAAA,KAAA,KAAA,E;;AADe;;AAGjB,EAAA,KAAQ,GAAA;AACV,QAAA,QAAA,EAAA,QAAA;AAAI,IAAA,QAAA,GAAW,EAAX;AACA,IAAA,QAAA,GAAW,KAAC,KAAD,CAAA,MAAA,CAAc,UAAA,IAAA,EAAA;aAAU,IAAI,CAAC,M;AAA7B,KAAA,EAAA,MAAA,CACc,IAAA,IAAA;aAAU,CAAC,KAAC,YAAD,CAAA,QAAA,CAAuB,IAAI,CAAJ,SAAA,CAAe,IAAI,CAA1C,MAAuB,CAAvB,C;AADzB,KAAA,EAAA,GAAA,CAEW,IAAA,IAAA;AAC1B,UAAA,MAAA;AAAM,MAAA,QAAQ,CAAR,IAAA,CAAc,IAAI,CAAJ,SAAA,CAAe,IAAI,CAAjC,MAAc,CAAd;AACA,MAAA,MAAA,GAAS,MAAM,CAAN,MAAA,CAAA,EAAA,EAAkB,IAAI,CAAtB,MAAA,EAA+B;AAAC,QAAA,aAAA,EAAe;AAAhB,OAA/B,CAAT;aACA,OAAO,CAAC,MAAR,CAAA,KAAA,CAAqB;AAAA,QAAA,MAAA,EAAQ;AAAR,OAArB,C;AALS,KAAA,CAAX;WAOA,OAAO,CAAP,GAAA,CAAA,QAAA,EAAA,OAAA,CAA8B,MAAA;AAC5B,WAAA,YAAA,GAAgB,MAAK,KAAC,YAAD,CAAA,MAAA,CAAL,QAAK,CAAL,CAAhB;aACA,KAAA,OAAA,GAAW,K;AAFb,KAAA,C;AATM;;AAaR,EAAA,gBAAkB,GAAA;AACpB,QAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;AAAI,SAAA,OAAA,GAAW,EAAX;AACA,SAAC,KAAD,CAAA,OAAA,CAAe,IAAA,IAAA;AACnB,UAAA,KAAA;AAAM,MAAA,KAAA,GAAQ,OAAO,CAAC,MAAR,CAAe,UAAf,CAAA,KAAA,EAAR;AACA,MAAA,KAAK,CAAL,IAAA,CAAW,IAAI,CAAC,KAAL,CAAX,IAAA;;AAEA,UAAG,IAAI,CAAC,KAAL,CAAH,UAAA,EAAA;AACE,QAAA,KAAA,GAAQ,KAAK,CAAL,UAAA,CAAiB,IAAI,CAAC,KAAL,CAAjB,UAAA,EAAwC,IAAI,CAAC,KAAL,CADlD,cACU,CAAR;;;AAEF,UAAG,IAAI,CAAC,KAAL,CAAH,KAAA,EAAA;AACE,QAAA,KAAA,GAAQ,KAAK,CAAL,KAAA,CAAY,IAAI,CAAC,KAAL,CADtB,KACU,CAAR;;;aAEF,KAAA,OAAA,GAAW,KAAC,OAAD,CAAA,MAAA,CAAgB,KAAK,CAArB,IAAgB,EAAhB,C;AAVb,KAAA;AAYA,SAAA,OAAA,GAAW,MAAK,KAAC,OAAD,CAAA,MAAA,CAAgB,SAAQ,KAAC,OAAD,CAAA,GAAA,CAAa,UAAA,CAAA,EAAA;aAAO,CAAC,CAAD,MAAA,E;AAAjD,KAA6B,CAAR,CAAhB,CAAL,CAAX;AACA,SAAA,OAAA,GAAW,SAAQ,KAAR,OAAA,EAAA,aAAA,CAAX;AACA,IAAA,QAAA,GAAW,KAAC,OAAD,CAAA,GAAA,CAAa,UAAA,KAAA,EAAA;aAAW,KAAK,CAAC,E;AAA9B,KAAA,CAAX;AAEA,IAAA,OAAA,GAAU,KAAC,OAAD,CAAA,MAAA,CAAgB,UAAA,KAAA,EAAA;aACxB,KAAK,CAAL,QAAA,KAAA,IAAA,IAA0B,CAAC,QAAQ,CAAR,QAAA,CAAkB,KAAK,CAAvB,QAAA,C;AADnB,KAAA,CAAV;AAGA,IAAA,gBAAA,GAAmB,EAAnB;AACA,SAAC,OAAD,CAAA,OAAA,CAAiB,KAAA,IAAA;aACf,gBAAgB,CAAC,KAAK,CAAtB,QAAgB,CAAhB,GAAmC,CAAC,gBAAgB,CAAC,KAAK,CAAtB,QAAgB,CAAhB,IAAD,EAAA,EAAA,MAAA,CAAgD,CAAhD,KAAgD,CAAhD,C;AADrC,KAAA;;AAGA,IAAA,IAAA,GAAO,UAAA,OAAA,EAAA;AACX,UAAA,CAAA;aAAM,CAAA,GAAI,OAAO,CAAP,GAAA,CAAY,UAAA,KAAA,EAAA;eACd;AAAA,UAAA,KAAA,EAAA,KAAA;AACA,UAAA,QAAA,EAAW,gBAAgB,CAAC,KAAK,CAAtB,EAAgB,CAAhB,IAA8B,IAAA,CAAK,gBAAgB,CAAC,KAAK,CAA1D,EAAoD,CAArB,CAA/B,IADV,EAAA;AAEA,UAAA,SAAA,EAAW,KAAK,CAAL,KAAA;AAFX,S;AADE,OAAA,C;AAzBV,KAwBI,CAzBgB,C;;;AAgChB,SAAA,UAAA,GAAc,IAAA,CAAA,OAAA,CAAd;AAEA,SAAA,WAAA,CAAa,KAAb,UAAA;AAEA,IAAA,QAAQ,CAAR,KAAA,CAAA,mBAAA,EAAoC,KAAC,UAAD,CAApC,EAAA;WAEA,KAAC,U;AAtCe;;AAwClB,EAAA,WAAa,CAAA,UAAA,EAAA;AACf,QAAA,YAAA,EAAA,YAAA,EAAA,SAAA,EAAA,MAAA;AAAI,IAAA,SAAA,GAAY,UAAU,CAAV,GAAA,CAAe,UAAA,CAAA,EAAA;aAAO,CAAC,CAAC,KAAF,CAAQ,Q;AAA9B,KAAA,CAAZ;AACA,IAAA,MAAA,GAAS,QAAQ,CAAR,aAAA,CAAA,SAAA,CAAT;AACA,IAAA,YAAA,GAAe,UAAU,CAAV,CAAU,CAAV,IAAiB,UAAU,CAAA,CAAA,CAAV,CAAjB,KAAA,IAAwC,UAAU,CAAA,CAAA,CAAV,CAAc,KAAd,CAAA,MAAA,EAAvD;AACA,IAAA,YAAA,GAAgB,YAAA,IAAiB,UAAU,CAAA,CAAA,CAAV,CAAc,KAAd,CAAA,MAAA,GAAlB,UAAA,IAA+D,CAA9E;WAGA,UAAU,CAAV,OAAA,CAAmB,GAAA,IAAA;AACvB,UAAA,cAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,cAAA,EAAA,GAAA;AAAM,MAAA,GAAG,CAAH,QAAA,GAAe,KAAA,QAAA,CAAU,GAAG,CAAb,KAAA,CAAf;AACA,MAAA,cAAA,GAAiB,MAAA,MAAA,EAAa,UAAA,KAAA,EAAA;eAAW,KAAK,CAAL,CAAK,CAAL,KAAY,GAAG,CAAC,KAAJ,CAAU,Q;AAA9C,OAAA,CAAjB;AACA,MAAA,iBAAA,GAAoB,MAAA,MAAA,EAAA,CAAA,MAAmB,GAAG,CAAC,KAAJ,CAAU,QAAjD;AACA,MAAA,cAAA,GAAiB,YAAA,IAAiB,GAAG,CAAC,KAAJ,CAAA,QAAA,KAAA,CAAA,IAAD,cAAjC;AACA,MAAA,GAAG,CAAH,mBAAA,GAA0B,CAA1B;;AACA,UAAA,cAAA,EAAA;AACE,QAAA,OAAA,GAAU,CAAV;AACA,QAAA,GAAA,GAAM,CAAN;AACA,QAAA,MAAM,CAAN,OAAA,CAAe,UAAA,KAAA,EAAA;AACb,cAAG,KAAK,CAAL,CAAK,CAAL,KAAY,GAAG,CAAC,KAAJ,CAAf,QAAA,EAAA;mBACE,GAAA,GAAO,GAAG,CAAC,KAAJ,CAAA,QAAA,GADT,O;AAAA,WAAA,MAAA;mBAGE,OAAA,GAAU,KAAK,CAHjB,CAGiB,C;;AAJnB,SAAA;AAKA,QAAA,GAAG,CAAH,mBAAA,GARF,GAQE;;;AAEF,MAAA,YAAA,GAAe,YAAA,KAAA,CAAA,IAAA,iBAAA,IAA2C,GAAG,CAAC,KAAJ,CAAA,QAAA,KAAD,YAAzD;AACA,MAAA,GAAG,CAAH,iBAAA,GAAyB,YAAA,IAAgB,YAAA,GAAe,MAAA,MAAA,EAAhC,CAAgC,CAAhC,IAAoD,CAA5E;AACA,MAAA,GAAG,CAAH,iBAAA,GAAwB,GAAG,CAAC,KAAJ,CAAA,UAAA,GAAuB,GAAG,CAAC,QAAJ,CAAa,MAA5D;;AAEA,UAA8B,GAAG,CAAC,QAAJ,CAA9B,MAAA,EAAA;eAAA,KAAA,WAAA,CAAa,GAAG,CAAhB,QAAA,C;;AApBF,KAAA,C;AAPW;;AA3VA,CAAf","sourcesContent":["import Records from '@/shared/services/records'\nimport { some, last, cloneDeep, max, isNumber, uniq, compact, orderBy, camelCase, forEach, isObject, sortedUniq, sortBy, without, map } from 'lodash'\nimport Vue from 'vue'\nimport RangeSet         from '@/shared/services/range_set'\nimport EventBus         from '@/shared/services/event_bus'\nimport Session from '@/shared/services/session'\n\nexport default class ThreadLoader\n  constructor: (discussion) ->\n    @discussion = discussion\n    @reset()\n\n  reset: ->\n    @collection = Vue.observable([])\n    @rules = []\n    @ruleStrings = []\n    @fetchedRules = []\n    @readRanges = cloneDeep @discussion.readRanges\n    @focusAttrs = {}\n    @visibleKeys = {}\n    @collapsed = Vue.observable({})\n    @loading = false\n    @padding = 50\n    @maxAutoLoadMore = 50\n\n  firstUnreadSequenceId: ->\n    (RangeSet.subtractRanges(@discussion.ranges, @readRanges)[0] || [])[0]\n\n  setVisible: (isVisible, event) ->\n    event.markAsRead() if isVisible\n    @visibleKeys[event.positionKey] = isVisible\n    EventBus.$emit('visibleKeys', Object.keys(@visibleKeys).filter((key) => @visibleKeys[key]).sort())\n\n  collapse: (event) ->\n    Object.keys(@visibleKeys).forEach (key) =>\n      @visibleKeys[key] = false if key.startsWith(event.positionKey)\n    Vue.set(@collapsed, event.id, true)\n\n  isUnread: (event) ->\n    if event.kind == \"new_discussion\"\n      @discussion.updatedAt > @discussion.lastReadAt\n    else\n      !RangeSet.includesValue(@readRanges, event.sequenceId)\n\n  sequenceIdIsUnread: (id) ->\n    if id == 0\n      @discussion.updatedAt > @discussion.lastReadAt\n    else\n      !RangeSet.includesValue(@readRanges, id)\n\n  expand: (event) ->\n    Vue.set(@collapsed, event.id, false)\n\n  jumpToEarliest: ->\n    @addLoadOldestFirstRule()\n    @fetch()\n\n  jumpToLatest: ->\n    @addLoadNewestFirstRule()\n    @fetch()\n\n  jumpToUnread: ->\n    @addLoadUnreadRule()\n    @fetch()\n\n  jumpToSequenceId: (id) ->\n    @addLoadSequenceIdRule(id)\n    @fetch()\n\n  loadEverything: ->\n    @loading = true\n    @addRuleAndFetch\n      local:\n        find:\n          discussionId: @discussion.id\n      remote:\n        discussion_id: @discussion.id\n        per: 1000\n\n  autoLoadAfter: (obj) ->\n    if (!@discussion.newestFirst && obj.event.depth == 1) || (obj.missingAfterCount && obj.missingAfterCount < @maxAutoLoadMore)\n      @loadAfter(obj.event)\n\n  loadChildren: (event) ->\n    @addLoadChildrenRule(event)\n    @fetch()\n\n  loadAfter: (event) ->\n    @addLoadAfterRule(event)\n    @fetch()\n\n  autoLoadBefore: (obj) ->\n    if (@discussion.newestFirst && obj.event.depth == 1) || (obj.missingEarlierCount && obj.missingEarlierCount < @maxAutoLoadMore)\n      @loadBefore(obj.event)\n\n  loadBefore: (event) ->\n    @loading = 'before'+event.id\n    @addLoadBeforeRule(event)\n    @fetch()\n\n  addLoadAfterRule: (event) ->\n    @addRule\n      name: \"load after #{event.positionKey}\"\n      local:\n        find:\n          discussionId: @discussion.id\n          positionKey:\n            $jgt: event.positionKey\n        simplesort: 'positionKey'\n        limit: @padding\n      remote:\n        discussion_id: @discussion.id\n        position_key_gt: event.positionKey\n        order_by: 'position_key'\n        per: @padding\n\n  addLoadBeforeRule: (event) ->\n    @addRule\n      name: \"load before #{event.positionKey}\"\n      local:\n        find:\n          discussionId: @discussion.id\n          positionKey:\n            $jlt: event.positionKey\n        simplesort: 'positionKey'\n        simplesortDesc: true\n        limit: @padding\n      remote:\n        discussion_id: @discussion.id\n        position_key_lt: event.positionKey\n        order_by: 'position_key'\n        order_desc: 1\n        per: @padding\n\n  addLoadChildrenRule: (event) ->\n    @addRule\n      name: \"load children #{event.positionKey}\"\n      local:\n        find:\n          discussionId: @discussion.id\n          parentId: event.id\n        simplesort: 'positionKey'\n        simplesortDesc: true\n        limit: @padding\n      remote:\n        discussion_id: @discussion.id\n        parent_id: event.id\n        order_by: 'position_key'\n        order_desc: 1\n        per: @padding\n\n  addLoadCommentRule: (commentId) ->\n    @addRule\n      name: \"comment from url\"\n      local:\n        find:\n          discussionId: @discussion.id\n          eventableId: commentId\n          eventableType: 'Comment'\n      remote:\n        order: 'sequence_id'\n        discussion_id: @discussion.id\n        comment_id: commentId\n\n  addLoadPositionRule: (position) ->\n    @addRule\n      name: \"position from url\"\n      local:\n        find:\n          discussionId: @discussion.id\n          depth: 1\n          position: {$gte: position}\n        simplesort: 'positionKey'\n        limit: @padding\n      remote:\n        discussion_id: @discussion.id\n        from_sequence_id_of_position: position\n        order: 'position_key'\n\n  addLoadPositionKeyRule: (positionKey) ->\n    @loading = positionKey\n    @addRule\n      name: \"positionKey from url\"\n      local:\n        find:\n          discussionId: @discussion.id\n          positionKey: {$jgte: positionKey}\n        simplesort: 'positionKey'\n        limit: parseInt(@padding/2)\n      remote:\n        discussion_id: @discussion.id\n        position_key_gte: positionKey\n        order_by: 'position_key'\n        per: parseInt(@padding/2)\n\n    @addRule\n      name: \"positionKey rollback\"\n      local:\n        find:\n          discussionId: @discussion.id\n          positionKey: {$jlt: positionKey}\n        simplesort: 'positionKey'\n        simplesortDesc: true\n        limit: parseInt(@padding/2)\n      remote:\n        discussion_id: @discussion.id\n        position_key_lt: positionKey\n        order_by: 'position_key'\n        order_desc: 1\n        per: parseInt(@padding/2)\n\n  addLoadSequenceIdRule: (sequenceId) ->\n    id = max([parseInt(sequenceId) - parseInt(@padding/2), 0])\n    @loading = id\n    @addRule\n      name: \"sequenceId from url\"\n      local:\n        find:\n          discussionId: @discussion.id\n          sequenceId: {'$jgte': id}\n        simplesort: 'sequenceId'\n        limit: @padding\n      remote:\n        sequence_id_gte: id\n        discussion_id: @discussion.id\n        order: 'sequence_id'\n        per: @padding\n\n  addLoadNewestRule: ->\n    @addRule\n      local:\n        find:\n          discussionId: @discussion.id\n        simplesort: 'sequenceId'\n        simplesortDesc: true\n        limit: @padding\n      remote:\n        discussion_id: @discussion.id\n        order_by: 'sequence_id'\n        order_desc: true\n        per: @padding\n\n  addContextRule: ->\n    @addRule\n      name: 'context'\n      local:\n        find:\n          id: @discussion.createdEvent().id\n\n  addLoadOldestRule: ->\n    @addRule\n      name: 'oldest'\n      local:\n        find:\n          discussionId: @discussion.id\n        simplesort: 'sequenceId'\n        limit: @padding\n      remote:\n        discussion_id: @discussion.id\n        order_by: 'sequence_id'\n        per: @padding\n\n  addLoadUnreadRule: ->\n    if @discussion.updatedAt > @discussion.lastReadAt\n      @addRule\n        name: \"context updated\"\n        local:\n          find:\n            id: @discussion.createdEvent().id\n\n    id = max([@firstUnreadSequenceId() - parseInt(@padding/2), @discussion.firstSequenceId()])\n    @addRule\n      name: {path: \"strand_nav.new_to_you\"}\n      local:\n        find:\n          discussionId: @discussion.id\n          sequenceId: {$jgte: id}\n        limit: @padding\n        order: 'sequenceId'\n      remote:\n        discussion_id: @discussion.id\n        sequence_id_gte: id\n        order_by: \"sequence_id\"\n        per: @padding\n\n  addRule: (rule) ->\n    ruleString = JSON.stringify(rule)\n\n    if !@ruleStrings.includes(ruleString)\n      @rules.push(rule)\n      @ruleStrings.push(ruleString)\n      # if @rules.length > 5\n      #   @rules.shift()\n      #   @ruleStrings.shift()\n      true\n    else\n      false\n\n  addRuleAndFetch: (rule) ->\n    @fetch() if @addRule(rule)\n\n  fetch:  ->\n    newRules = []\n    promises = @rules.filter((rule) -> rule.remote)\n                     .filter((rule) => !@fetchedRules.includes(JSON.stringify(rule.remote)))\n                     .map (rule) =>\n      newRules.push(JSON.stringify(rule.remote))\n      params = Object.assign {}, rule.remote, {exclude_types: 'group discussion'}\n      Records.events.fetch(params: params)\n\n    Promise.all(promises).finally =>\n      @fetchedRules = uniq @fetchedRules.concat(newRules)\n      @loading = false\n\n  updateCollection: ->\n    @records = []\n    @rules.forEach (rule) =>\n      chain = Records.events.collection.chain()\n      chain.find(rule.local.find)\n\n      if rule.local.simplesort\n        chain = chain.simplesort(rule.local.simplesort, rule.local.simplesortDesc)\n\n      if rule.local.limit\n        chain = chain.limit(rule.local.limit)\n\n      @records = @records.concat(chain.data())\n\n    @records = uniq @records.concat(compact(@records.map (o) -> o.parent()))\n    @records = orderBy @records, 'positionKey'\n    eventIds = @records.map (event) -> event.id\n\n    orphans = @records.filter (event) ->\n      event.parentId == null || !eventIds.includes(event.parentId)\n\n    eventsByParentId = {}\n    @records.forEach (event) =>\n      eventsByParentId[event.parentId] = (eventsByParentId[event.parentId] || []).concat([event])\n\n    nest = (records) ->\n      r = records.map (event) ->\n        event: event\n        children: (eventsByParentId[event.id] && nest(eventsByParentId[event.id])) || []\n        eventable: event.model()\n      # orderBy r, 'positionKey'\n\n    @collection = nest(orphans)\n\n    @addMetaData(@collection)\n\n    EventBus.$emit('collectionUpdated', @discussion.id)\n\n    @collection\n\n  addMetaData: (collection) ->\n    positions = collection.map (e) -> e.event.position\n    ranges = RangeSet.arrayToRanges(positions)\n    parentExists = collection[0] && collection[0].event && collection[0].event.parent()\n    lastPosition = (parentExists && (collection[0].event.parent().childCount)) || 0\n\n\n    collection.forEach (obj) =>\n      obj.isUnread = @isUnread(obj.event)\n      isFirstInRange = some(ranges, (range) -> range[0] == obj.event.position)\n      isLastInLastRange = last(ranges)[1] == obj.event.position\n      missingEarlier = parentExists && (obj.event.position != 1 && isFirstInRange)\n      obj.missingEarlierCount = 0\n      if missingEarlier\n        lastPos = 1\n        val = 0\n        ranges.forEach (range) ->\n          if range[0] == obj.event.position\n            val = (obj.event.position - lastPos)\n          else\n            lastPos = range[1]\n        obj.missingEarlierCount = val\n\n      missingAfter = lastPosition != 0 && isLastInLastRange && (obj.event.position != lastPosition)\n      obj.missingAfterCount = (missingAfter && lastPosition - last(ranges)[1]) || 0\n      obj.missingChildCount = obj.event.childCount - obj.children.length\n\n      @addMetaData(obj.children) if obj.children.length\n"],"sourceRoot":""}]}