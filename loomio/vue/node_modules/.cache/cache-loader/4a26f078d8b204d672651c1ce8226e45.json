{"remainingRequest":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js!/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js!/home/gustavo/Documents/tese/loomio/vue/src/shared/models/membership_model.coffee","dependencies":[{"path":"/home/gustavo/Documents/tese/loomio/vue/src/shared/models/membership_model.coffee","mtime":1706724415808},{"path":"/home/gustavo/Documents/tese/loomio/vue/.babelrc","mtime":1706724415792},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/cache-loader/dist/cjs.js","mtime":1706724497848},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js","mtime":1706724500796},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js","mtime":1706724497848}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9pbnZva2VNYXAgZnJvbSAibG9kYXNoL2ludm9rZU1hcCI7CmltcG9ydCBfZWFjaCBmcm9tICJsb2Rhc2gvZWFjaCI7CnZhciBNZW1iZXJzaGlwTW9kZWw7CmltcG9ydCBCYXNlTW9kZWwgZnJvbSAnQC9zaGFyZWQvcmVjb3JkX3N0b3JlL2Jhc2VfbW9kZWwnOwppbXBvcnQgQXBwQ29uZmlnIGZyb20gJ0Avc2hhcmVkL3NlcnZpY2VzL2FwcF9jb25maWcnOwppbXBvcnQgY29tcGFyZUFzYyBmcm9tICdkYXRlLWZucy9jb21wYXJlQXNjJzsKZXhwb3J0IGRlZmF1bHQgTWVtYmVyc2hpcE1vZGVsID0gZnVuY3Rpb24gKCkgewogIGNsYXNzIE1lbWJlcnNoaXBNb2RlbCBleHRlbmRzIEJhc2VNb2RlbCB7CiAgICBkZWZhdWx0VmFsdWVzKCkgewogICAgICByZXR1cm4gewogICAgICAgIHVzZXJJZDogbnVsbCwKICAgICAgICBncm91cElkOiBudWxsLAogICAgICAgIGFyY2hpdmVkQXQ6IG51bGwsCiAgICAgICAgaW52aXRlcklkOiBudWxsLAogICAgICAgIHZvbHVtZTogbnVsbAogICAgICB9OwogICAgfQoKICAgIHJlbGF0aW9uc2hpcHMoKSB7CiAgICAgIHRoaXMuYmVsb25nc1RvKCdncm91cCcpOwogICAgICB0aGlzLmJlbG9uZ3NUbygndXNlcicpOwogICAgICByZXR1cm4gdGhpcy5iZWxvbmdzVG8oJ2ludml0ZXInLCB7CiAgICAgICAgZnJvbTogJ3VzZXJzJwogICAgICB9KTsKICAgIH0KCiAgICB1c2VyTmFtZSgpIHsKICAgICAgcmV0dXJuIHRoaXMudXNlcigpLm5hbWVXaXRoVGl0bGUodGhpcy5ncm91cCgpKTsKICAgIH0KCiAgICB1c2VyVXNlcm5hbWUoKSB7CiAgICAgIHJldHVybiB0aGlzLnVzZXIoKS51c2VybmFtZTsKICAgIH0KCiAgICB1c2VyRW1haWwoKSB7CiAgICAgIHJldHVybiB0aGlzLnVzZXIoKS5lbWFpbDsKICAgIH0KCiAgICBncm91cE5hbWUoKSB7CiAgICAgIHJldHVybiB0aGlzLmdyb3VwKCkubmFtZTsKICAgIH0KCiAgICBzYXZlVm9sdW1lKHZvbHVtZSkgewogICAgICBsZXQgYXBwbHlUb0FsbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7CiAgICAgIHRoaXMucHJvY2Vzc2luZyA9IHRydWU7CiAgICAgIHJldHVybiB0aGlzLnJlbW90ZS5wYXRjaE1lbWJlcih0aGlzLmtleU9ySWQoKSwgJ3NldF92b2x1bWUnLCB7CiAgICAgICAgdm9sdW1lOiB2b2x1bWUsCiAgICAgICAgYXBwbHlfdG9fYWxsOiBhcHBseVRvQWxsLAogICAgICAgIHVuc3Vic2NyaWJlX3Rva2VuOiB0aGlzLnVzZXIoKS51bnN1YnNjcmliZVRva2VuCiAgICAgIH0pLnRoZW4oKCkgPT4gewogICAgICAgIGlmIChhcHBseVRvQWxsKSB7CiAgICAgICAgICB0aGlzLnJlY29yZFN0b3JlLmRpc2N1c3Npb25zLmNvbGxlY3Rpb24uZmluZCh7CiAgICAgICAgICAgIGdyb3VwSWQ6IHsKICAgICAgICAgICAgICAkaW46IHRoaXMuZ3JvdXAoKS5vcmdhbmlzYXRpb25JZHMoKQogICAgICAgICAgICB9CiAgICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChkaXNjdXNzaW9uKSB7CiAgICAgICAgICAgIHJldHVybiBkaXNjdXNzaW9uLnVwZGF0ZSh7CiAgICAgICAgICAgICAgZGlzY3Vzc2lvblJlYWRlclZvbHVtZTogbnVsbAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIF9lYWNoKHRoaXMudXNlcigpLm1lbWJlcnNoaXBzKCksIGZ1bmN0aW9uIChtZW1iZXJzaGlwKSB7CiAgICAgICAgICAgIHJldHVybiBtZW1iZXJzaGlwLnVwZGF0ZSh7CiAgICAgICAgICAgICAgdm9sdW1lOiB2b2x1bWUKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIF9lYWNoKHRoaXMuZ3JvdXAoKS5kaXNjdXNzaW9ucygpLCBmdW5jdGlvbiAoZGlzY3Vzc2lvbikgewogICAgICAgICAgICByZXR1cm4gZGlzY3Vzc2lvbi51cGRhdGUoewogICAgICAgICAgICAgIGRpc2N1c3Npb25SZWFkZXJWb2x1bWU6IG51bGwKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pLmZpbmFsbHkoKCkgPT4gewogICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NpbmcgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9CgogICAgcmVzZW5kKCkgewogICAgICByZXR1cm4gdGhpcy5yZW1vdGUucG9zdE1lbWJlcih0aGlzLmtleU9ySWQoKSwgJ3Jlc2VuZCcpLnRoZW4oKCkgPT4gewogICAgICAgIHJldHVybiB0aGlzLnJlc2VudCA9IHRydWU7CiAgICAgIH0pOwogICAgfQoKICAgIGlzTXV0ZWQoKSB7CiAgICAgIHJldHVybiB0aGlzLnZvbHVtZSA9PT0gJ211dGUnOwogICAgfQoKICAgIGJlZm9yZVJlbW92ZSgpIHsKICAgICAgcmV0dXJuIF9pbnZva2VNYXAodGhpcy5yZWNvcmRTdG9yZS5ldmVudHMuZmluZCh7CiAgICAgICAgJ2V2ZW50YWJsZVR5cGUnOiAnbWVtYmVyc2hpcCcsCiAgICAgICAgJ2V2ZW50YWJsZUlkJzogdGhpcy5pZAogICAgICB9KSwgJ3JlbW92ZScpOwogICAgfQoKICB9CgogIDsKICBNZW1iZXJzaGlwTW9kZWwuc2luZ3VsYXIgPSAnbWVtYmVyc2hpcCc7CiAgTWVtYmVyc2hpcE1vZGVsLnBsdXJhbCA9ICdtZW1iZXJzaGlwcyc7CiAgTWVtYmVyc2hpcE1vZGVsLmluZGljZXMgPSBbJ3VzZXJJZCcsICdncm91cElkJ107CiAgTWVtYmVyc2hpcE1vZGVsLnVuaXF1ZUluZGljZXMgPSBbJ2lkJ107CiAgTWVtYmVyc2hpcE1vZGVsLnNlYXJjaGFibGVGaWVsZHMgPSBbJ3VzZXJOYW1lJywgJ3VzZXJVc2VybmFtZSddOwogIHJldHVybiBNZW1iZXJzaGlwTW9kZWw7Cn0uY2FsbCh0aGlzKTs="},{"version":3,"sources":["/home/gustavo/Documents/tese/loomio/vue/src/shared/models/membership_model.coffee"],"names":[],"mappings":"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","sourcesContent":["import BaseModel from '@/shared/record_store/base_model'\nimport AppConfig from '@/shared/services/app_config'\nimport compareAsc from 'date-fns/compareAsc'\nimport {each, invokeMap} from 'lodash'\n\nexport default class MembershipModel extends BaseModel\n  @singular: 'membership'\n  @plural: 'memberships'\n  @indices: ['userId', 'groupId']\n  @uniqueIndices: ['id']\n  @searchableFields: ['userName', 'userUsername']\n\n  defaultValues: ->\n    userId: null\n    groupId: null\n    archivedAt: null\n    inviterId: null\n    volume: null\n\n  relationships: ->\n    @belongsTo 'group'\n    @belongsTo 'user'\n    @belongsTo 'inviter', from: 'users'\n\n  userName: ->\n    @user().nameWithTitle(@group())\n\n  userUsername: ->\n    @user().username\n\n  userEmail: ->\n    @user().email\n\n  groupName: ->\n    @group().name\n\n  saveVolume: (volume, applyToAll = false) ->\n    @processing = true\n    @remote.patchMember(@keyOrId(), 'set_volume',\n      volume: volume\n      apply_to_all: applyToAll\n      unsubscribe_token: @user().unsubscribeToken\n    ).then =>\n      if applyToAll\n        @recordStore.discussions.collection.find({ groupId: { $in: @group().organisationIds() } }).forEach((discussion) -> discussion.update(discussionReaderVolume: null))\n        each @user().memberships(), (membership) ->\n          membership.update(volume: volume)\n      else\n        each @group().discussions(), (discussion) ->\n          discussion.update(discussionReaderVolume: null)\n    .finally =>\n      @processing = false\n\n  resend: ->\n    @remote.postMember(@keyOrId(), 'resend').then =>\n      @resent = true\n\n  isMuted: ->\n    @volume == 'mute'\n\n  beforeRemove: ->\n    invokeMap(@recordStore.events.find('eventableType': 'membership', 'eventableId': @id), 'remove')\n"],"sourceRoot":""}]}