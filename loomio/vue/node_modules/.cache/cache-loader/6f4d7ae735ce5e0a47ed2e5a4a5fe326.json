{"remainingRequest":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js!/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js!/home/gustavo/Documents/tese/loomio/vue/src/shared/helpers/emojis.coffee","dependencies":[{"path":"/home/gustavo/Documents/tese/loomio/vue/src/shared/helpers/emojis.coffee","mtime":1706724415808},{"path":"/home/gustavo/Documents/tese/loomio/vue/.babelrc","mtime":1706724415792},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/cache-loader/dist/cjs.js","mtime":1706724497848},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js","mtime":1706724500796},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js","mtime":1706724497848}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9lYWNoIGZyb20gImxvZGFzaC9lYWNoIjsKdmFyIGNvbG9uc1J4LCBlbW9qaXMsIHJ4OwppbXBvcnQgZW1vamlVbmljb2RlIGZyb20gJ2Vtb2ppLXVuaWNvZGUnOwppbXBvcnQgZW1vamlzQnlDYXRlZ29yeSBmcm9tICcuL2Vtb2ppX3RhYmxlJzsKaW1wb3J0IEFwcENvbmZpZyBmcm9tICdAL3NoYXJlZC9zZXJ2aWNlcy9hcHBfY29uZmlnJzsKcnggPSAvKD86W1x1MjcwMC1cdTI3YmZdfCg/Olx1ZDgzY1tcdWRkZTYtXHVkZGZmXSl7Mn18W1x1ZDgwMC1cdWRiZmZdW1x1ZGMwMC1cdWRmZmZdfFtcdTAwMjMtXHUwMDM5XVx1ZmUwZj9cdTIwZTN8XHUzMjk5fFx1MzI5N3xcdTMwM2R8XHUzMDMwfFx1MjRjMnxcdWQ4M2NbXHVkZDcwLVx1ZGQ3MV18XHVkODNjW1x1ZGQ3ZS1cdWRkN2ZdfFx1ZDgzY1x1ZGQ4ZXxcdWQ4M2NbXHVkZDkxLVx1ZGQ5YV18XHVkODNjW1x1ZGRlNi1cdWRkZmZdfFtcdWQ4M2NbXHVkZTAxLVx1ZGUwMl18XHVkODNjXHVkZTFhfFx1ZDgzY1x1ZGUyZnxbXHVkODNjW1x1ZGUzMi1cdWRlM2FdfFtcdWQ4M2NbXHVkZTUwLVx1ZGU1MV18XHUyMDNjfFx1MjA0OXxbXHUyNWFhLVx1MjVhYl18XHUyNWI2fFx1MjVjMHxbXHUyNWZiLVx1MjVmZV18XHUwMGE5fFx1MDBhZXxcdTIxMjJ8XHUyMTM5fFx1ZDgzY1x1ZGMwNHxbXHUyNjAwLVx1MjZGRl18XHUyYjA1fFx1MmIwNnxcdTJiMDd8XHUyYjFifFx1MmIxY3xcdTJiNTB8XHUyYjU1fFx1MjMxYXxcdTIzMWJ8XHUyMzI4fFx1MjNjZnxbXHUyM2U5LVx1MjNmM118W1x1MjNmOC1cdTIzZmFdfFx1ZDgzY1x1ZGNjZnxcdTI5MzR8XHUyOTM1KS9nOwplbW9qaXMgPSB7fTsKCl9lYWNoKGVtb2ppc0J5Q2F0ZWdvcnksIGZ1bmN0aW9uIChoYXNoLCBuYW1lKSB7CiAgcmV0dXJuIF9lYWNoKGhhc2gsIGZ1bmN0aW9uICh1bmljb2RlLCBzaG9ydGNvZGUpIHsKICAgIHJldHVybiBlbW9qaXNbc2hvcnRjb2RlXSA9IHVuaWNvZGU7CiAgfSk7Cn0pOwoKY29sb25zUnggPSAvXDpbYS16QS1aMC05LV8rXStcOi9nOwpleHBvcnQgeyBlbW9qaXMsIGVtb2ppc0J5Q2F0ZWdvcnkgfTsKZXhwb3J0IHZhciBzdHJpcENvbG9ucyA9IGZ1bmN0aW9uIChjb2xvbnMpIHsKICBpZiAoY29sb25zICYmIGNvbG9uc1swXSA9PT0gJzonICYmIGNvbG9uc1tjb2xvbnMubGVuZ3RoIC0gMV0gPT09ICc6JykgewogICAgcmV0dXJuIGNvbG9ucy5zdWJzdHJpbmcoMSwgY29sb25zLmxlbmd0aCAtIDEpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gY29sb25zOwogIH0KfTsKZXhwb3J0IHZhciBjb2xvblRvVW5pY29kZSA9IGZ1bmN0aW9uIChjb2xvbnMpIHsKICByZXR1cm4gc2hvcnRDb2RlVG9Vbmljb2RlKHN0cmlwQ29sb25zKGNvbG9ucykpOwp9OwpleHBvcnQgdmFyIHNob3J0Q29kZVRvVW5pY29kZSA9IGZ1bmN0aW9uIChzaG9ydGNvZGUpIHsKICByZXR1cm4gZW1vamlzW3Nob3J0Y29kZUNvcnJlY3Qoc2hvcnRjb2RlKV0gfHwgYDoke3Nob3J0Y29kZUNvcnJlY3Qoc2hvcnRjb2RlKX06YDsKfTsKZXhwb3J0IHZhciBzaG9ydGNvZGVDb3JyZWN0ID0gZnVuY3Rpb24gKHNob3J0Y29kZSkgewogIHZhciBjb3JyZWN0aW9uczsKICBjb3JyZWN0aW9ucyA9IHsKICAgICcrMSc6ICd0aHVtYnN1cCcsCiAgICAnLTEnOiAndGh1bWJzZG93bicsCiAgICAndGhpbmtpbmdfZmFjZSc6ICd0aGlua2luZycsCiAgICAnY3Jvc3NlZF9maW5nZXJzJzogJ2ZpbmdlcnNfY3Jvc3NlZCcsCiAgICAnbmVyZF9mYWNlJzogJ25lcmQnLAogICAgJ2h1Z2dpbmdfZmFjZSc6ICdodWdnaW5nJywKICAgICdzbGlnaHRseV9mcm93bmluZ19mYWNlJzogJ3NsaWdodF9mcm93bicKICB9OwoKICBpZiAoY29ycmVjdGlvbnNbc2hvcnRjb2RlXSAhPSBudWxsKSB7CiAgICByZXR1cm4gY29ycmVjdGlvbnNbc2hvcnRjb2RlXTsKICB9IGVsc2UgewogICAgcmV0dXJuIHNob3J0Y29kZTsKICB9Cn07CmV4cG9ydCB2YXIgY29sb25zVG9Vbmljb2RlID0gZnVuY3Rpb24gKHN0cikgewogIHJldHVybiBzdHIucmVwbGFjZShjb2xvbnNSeCwgY29sb25Ub1VuaWNvZGUpOwp9OwpleHBvcnQgdmFyIHNyY0ZvckVtb2ppID0gZnVuY3Rpb24gKGNoYXIsIHNldCkgewogIHZhciBwcmVmaXgsIHN1ZmZpeDsKICBjaGFyID0gY2hhci5tYXRjaChyeClbMF07IC8vIHByZWZpeCA9ICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaGZnLWdtdWVuZC9vcGVubW9qaS9tYXN0ZXIvY29sb3Ivc3ZnLycKICAvLyBzdWZmaXggPSAnLnN2ZycKICAvLyBwcmVmaXggKyBlbW9qaVVuaWNvZGUoY2hhcikudG9VcHBlckNhc2UoKS5yZXBsYWNlKCcgJywgJy0nKSArIHN1ZmZpeAoKICBwcmVmaXggPSAnL2ltZy9lbW9qaXMvJzsKICBzdWZmaXggPSAnLnBuZyc7CiAgcmV0dXJuIHByZWZpeCArIGVtb2ppVW5pY29kZShjaGFyKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJyAnLCAnLScpICsgc3VmZml4Owp9OwpleHBvcnQgdmFyIGltZ0ZvckVtb2ppID0gZnVuY3Rpb24gKGNoYXIpIHsKICByZXR1cm4gJzxpbWcgY2xhc3M9ImVtb2ppIiBzcmM9IicgKyBzcmNGb3JFbW9qaShjaGFyKSArICciPic7Cn07CmV4cG9ydCB2YXIgZW1vamlTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGN0eCwgbm9kZTsKICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CgogIGlmICghbm9kZS5nZXRDb250ZXh0IHx8ICFub2RlLmdldENvbnRleHQoJzJkJykgfHwgdHlwZW9mIG5vZGUuZ2V0Q29udGV4dCgnMmQnKS5maWxsVGV4dCAhPT0gJ2Z1bmN0aW9uJykgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgY3R4ID0gbm9kZS5nZXRDb250ZXh0KCcyZCcpOwogIGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJzsKICBjdHguZm9udCA9ICczMnB4IEFyaWFsJzsKICBjdHguZmlsbFRleHQoJ/CfmIMnLCAwLCAwKTsKICByZXR1cm4gY3R4LmdldEltYWdlRGF0YSgxNiwgMTYsIDEsIDEpLmRhdGFbMF0gIT09IDA7Cn0oKTsKZXhwb3J0IHZhciBlbW9qaVJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHsKICBpZiAoZW1vamlTdXBwb3J0ZWQpIHsKICAgIHJldHVybiB0ZXh0OwogIH0gZWxzZSB7CiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHJ4LCBmdW5jdGlvbiAobWF0Y2gpIHsKICAgICAgcmV0dXJuIGltZ0ZvckVtb2ppKG1hdGNoKTsKICAgIH0pOwogIH0KfTs="},{"version":3,"sources":["/home/gustavo/Documents/tese/loomio/vue/src/shared/helpers/emojis.coffee"],"names":[],"mappings":"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","sourcesContent":["import { each, keys } from 'lodash'\nimport emojiUnicode from 'emoji-unicode'\nimport emojisByCategory from './emoji_table'\nimport AppConfig      from '@/shared/services/app_config'\n\nrx = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|[\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|[\\ud83c[\\ude32-\\ude3a]|[\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935)/g\n\nemojis = {}\n\neach emojisByCategory, (hash, name) ->\n  each hash, (unicode, shortcode) ->\n    emojis[shortcode] = unicode\n\ncolonsRx = /\\:[a-zA-Z0-9-_+]+\\:/g\n\nexport { emojis, emojisByCategory }\n\nexport stripColons = (colons) ->\n  if colons && (colons[0] == ':') && (colons[colons.length - 1] == ':')\n    colons.substring(1, colons.length - 1)\n  else\n    colons\n\nexport colonToUnicode = (colons) ->\n  shortCodeToUnicode(stripColons(colons))\n\nexport shortCodeToUnicode = (shortcode) ->\n  emojis[shortcodeCorrect(shortcode)] or \":#{shortcodeCorrect(shortcode)}:\"\n\nexport shortcodeCorrect = (shortcode) ->\n  corrections =\n    '+1': 'thumbsup'\n    '-1': 'thumbsdown'\n    'thinking_face': 'thinking'\n    'crossed_fingers': 'fingers_crossed'\n    'nerd_face': 'nerd'\n    'hugging_face': 'hugging'\n    'slightly_frowning_face': 'slight_frown'\n\n  if corrections[shortcode]?\n    corrections[shortcode]\n  else\n    shortcode\n\nexport colonsToUnicode = (str) ->\n  str.replace colonsRx, colonToUnicode\n\nexport srcForEmoji = (char, set) ->\n  char = char.match(rx)[0]\n  # prefix = 'https://raw.githubusercontent.com/hfg-gmuend/openmoji/master/color/svg/'\n  # suffix = '.svg'\n  # prefix + emojiUnicode(char).toUpperCase().replace(' ', '-') + suffix\n  prefix = '/img/emojis/'\n  suffix = '.png'\n  prefix + emojiUnicode(char).toLowerCase().replace(' ', '-') + suffix\n\nexport imgForEmoji = (char) ->\n  '<img class=\"emoji\" src=\"' + srcForEmoji(char) + '\">'\n\nexport emojiSupported = do ->\n  node = document.createElement('canvas')\n  return false if !node.getContext or !node.getContext('2d') or typeof node.getContext('2d').fillText != 'function'\n  ctx = node.getContext('2d')\n  ctx.textBaseline = 'top'\n  ctx.font = '32px Arial'\n  ctx.fillText '😃', 0, 0\n  ctx.getImageData(16, 16, 1, 1).data[0] != 0\n\nexport emojiReplaceText = (text) ->\n  if emojiSupported\n    text\n  else\n    text.replace rx, (match) -> imgForEmoji(match)\n"],"sourceRoot":""}]}