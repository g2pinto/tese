{"remainingRequest":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js!/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js!/home/gustavo/Documents/tese/loomio/vue/src/shared/interfaces/user_records_interface.coffee","dependencies":[{"path":"/home/gustavo/Documents/tese/loomio/vue/src/shared/interfaces/user_records_interface.coffee","mtime":1706724415808},{"path":"/home/gustavo/Documents/tese/loomio/vue/.babelrc","mtime":1706724415792},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/cache-loader/dist/cjs.js","mtime":1706724497848},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/babel-loader/lib/index.js","mtime":1706724500796},{"path":"/home/gustavo/Documents/tese/loomio/vue/node_modules/vue-cli-plugin-coffee/node_modules/coffee-loader/dist/cjs.js","mtime":1706724497848}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9pZGVudGl0eSBmcm9tICJsb2Rhc2gvaWRlbnRpdHkiOwppbXBvcnQgX3BpY2tCeSBmcm9tICJsb2Rhc2gvcGlja0J5IjsKaW1wb3J0IF9tZXJnZSBmcm9tICJsb2Rhc2gvbWVyZ2UiOwoKdmFyIFVzZXJSZWNvcmRzSW50ZXJmYWNlLAogICAgYm91bmRNZXRob2RDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdCb3VuZCBpbnN0YW5jZSBtZXRob2QgYWNjZXNzZWQgYmVmb3JlIGJpbmRpbmcnKTsKICB9Cn07CgppbXBvcnQgQmFzZVJlY29yZHNJbnRlcmZhY2UgZnJvbSAnQC9zaGFyZWQvcmVjb3JkX3N0b3JlL2Jhc2VfcmVjb3Jkc19pbnRlcmZhY2UnOwppbXBvcnQgVXNlck1vZGVsIGZyb20gJ0Avc2hhcmVkL21vZGVscy91c2VyX21vZGVsJzsKaW1wb3J0IEFub255bW91c1VzZXJNb2RlbCBmcm9tICdAL3NoYXJlZC9tb2RlbHMvYW5vbnltb3VzX3VzZXJfbW9kZWwnOwpleHBvcnQgZGVmYXVsdCBVc2VyUmVjb3Jkc0ludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHsKICBjbGFzcyBVc2VyUmVjb3Jkc0ludGVyZmFjZSBleHRlbmRzIEJhc2VSZWNvcmRzSW50ZXJmYWNlIHsKICAgIGNvbnN0cnVjdG9yKCkgewogICAgICBzdXBlciguLi5hcmd1bWVudHMpOwogICAgICB0aGlzLmZldGNoTWVudGlvbmFibGUgPSB0aGlzLmZldGNoTWVudGlvbmFibGUuYmluZCh0aGlzKTsKICAgICAgdGhpcy51cGRhdGVQcm9maWxlID0gdGhpcy51cGRhdGVQcm9maWxlLmJpbmQodGhpcyk7CiAgICAgIHRoaXMudXBsb2FkQXZhdGFyID0gdGhpcy51cGxvYWRBdmF0YXIuYmluZCh0aGlzKTsKICAgICAgdGhpcy5jaGFuZ2VQYXNzd29yZCA9IHRoaXMuY2hhbmdlUGFzc3dvcmQuYmluZCh0aGlzKTsKICAgICAgdGhpcy5kZXN0cm95ID0gdGhpcy5kZXN0cm95LmJpbmQodGhpcyk7CiAgICAgIHRoaXMuc2F2ZUV4cGVyaWVuY2UgPSB0aGlzLnNhdmVFeHBlcmllbmNlLmJpbmQodGhpcyk7CiAgICB9CgogICAgbnVsbE1vZGVsKCkgewogICAgICByZXR1cm4gbmV3IEFub255bW91c1VzZXJNb2RlbCgpOwogICAgfQoKICAgIGZldGNoVGltZVpvbmVzKCkgewogICAgICByZXR1cm4gdGhpcy5yZW1vdGUuZmV0Y2goewogICAgICAgIHBhdGg6ICJ0aW1lX3pvbmVzIgogICAgICB9KTsKICAgIH0KCiAgICBmZXRjaEdyb3VwcygpIHsKICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goewogICAgICAgIHBhdGg6ICJncm91cHMiLAogICAgICAgIHBhcmFtczogewogICAgICAgICAgZXhjbHVkZV90eXBlczogJ3VzZXInCiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICBmZXRjaE1lbnRpb25hYmxlKHEsIG1vZGVsKSB7CiAgICAgIGJvdW5kTWV0aG9kQ2hlY2sodGhpcywgVXNlclJlY29yZHNJbnRlcmZhY2UpOwoKICAgICAgaWYgKG1vZGVsLmlkID09IG51bGwgJiYgbW9kZWwuZGlzY3Vzc2lvbklkKSB7CiAgICAgICAgbW9kZWwgPSBtb2RlbC5kaXNjdXNzaW9uKCk7CiAgICAgIH0KCiAgICAgIGlmIChtb2RlbC5pZCA9PSBudWxsICYmICFtb2RlbC5kaXNjdXNzaW9uSWQpIHsKICAgICAgICBtb2RlbCA9IG1vZGVsLmdyb3VwKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLmZldGNoKHsKICAgICAgICBwYXRoOiAnbWVudGlvbmFibGVfdXNlcnMnLAogICAgICAgIHBhcmFtczogewogICAgICAgICAgcTogcSwKICAgICAgICAgIFtgJHttb2RlbC5jb25zdHJ1Y3Rvci5zaW5ndWxhcn1faWRgXTogbW9kZWwuaWQKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIHVwZGF0ZVByb2ZpbGUodXNlcikgewogICAgICBib3VuZE1ldGhvZENoZWNrKHRoaXMsIFVzZXJSZWNvcmRzSW50ZXJmYWNlKTsKICAgICAgdXNlci5wcm9jZXNzaW5nID0gdHJ1ZTsKICAgICAgdXNlci5iZWZvcmVTYXZlKCk7CiAgICAgIHJldHVybiB0aGlzLnJlbW90ZS5wb3N0KCd1cGRhdGVfcHJvZmlsZScsIF9tZXJnZSh1c2VyLnNlcmlhbGl6ZSgpLCB7CiAgICAgICAgdW5zdWJzY3JpYmVfdG9rZW46IHVzZXIudW5zdWJzY3JpYmVUb2tlbgogICAgICB9KSkuY2F0Y2goZGF0YSA9PiB7CiAgICAgICAgaWYgKGRhdGEuZXJyb3JzKSB7CiAgICAgICAgICB1c2VyLnNldEVycm9ycyhkYXRhLmVycm9ycyk7CiAgICAgICAgfQoKICAgICAgICB0aHJvdyBkYXRhOwogICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdXNlci5wcm9jZXNzaW5nID0gZmFsc2U7CiAgICAgIH0pOwogICAgfQoKICAgIHVwbG9hZEF2YXRhcihmaWxlKSB7CiAgICAgIGJvdW5kTWV0aG9kQ2hlY2sodGhpcywgVXNlclJlY29yZHNJbnRlcmZhY2UpOwogICAgICByZXR1cm4gdGhpcy5yZW1vdGUudXBsb2FkKCd1cGxvYWRfYXZhdGFyJywgZmlsZSk7CiAgICB9CgogICAgY2hhbmdlUGFzc3dvcmQodXNlcikgewogICAgICBib3VuZE1ldGhvZENoZWNrKHRoaXMsIFVzZXJSZWNvcmRzSW50ZXJmYWNlKTsKICAgICAgdXNlci5wcm9jZXNzaW5nID0gdHJ1ZTsKICAgICAgcmV0dXJuIHRoaXMucmVtb3RlLnBvc3QoJ2NoYW5nZV9wYXNzd29yZCcsIHVzZXIuc2VyaWFsaXplKCkpLmZpbmFsbHkoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB1c2VyLnByb2Nlc3NpbmcgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9CgogICAgZGVzdHJveSgpIHsKICAgICAgYm91bmRNZXRob2RDaGVjayh0aGlzLCBVc2VyUmVjb3Jkc0ludGVyZmFjZSk7CiAgICAgIHJldHVybiB0aGlzLnJlbW90ZS5kZWxldGUoJy8nKTsKICAgIH0KCiAgICBzYXZlRXhwZXJpZW5jZShuYW1lKSB7CiAgICAgIGxldCB2YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTsKICAgICAgYm91bmRNZXRob2RDaGVjayh0aGlzLCBVc2VyUmVjb3Jkc0ludGVyZmFjZSk7CiAgICAgIHJldHVybiB0aGlzLnJlbW90ZS5wb3N0KCdzYXZlX2V4cGVyaWVuY2UnLCB7CiAgICAgICAgZXhwZXJpZW5jZTogbmFtZSwKICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgfSk7CiAgICB9CgogICAgZW1haWxTdGF0dXMoZW1haWwsIHRva2VuKSB7CiAgICAgIHJldHVybiB0aGlzLmZldGNoKHsKICAgICAgICBwYXRoOiAnZW1haWxfc3RhdHVzJywKICAgICAgICBwYXJhbXM6IF9waWNrQnkoewogICAgICAgICAgZW1haWw6IGVtYWlsLAogICAgICAgICAgdG9rZW46IHRva2VuCiAgICAgICAgfSwgX2lkZW50aXR5KQogICAgICB9KTsKICAgIH0KCiAgICBjaGVja0VtYWlsRXhpc3RlbmNlKGVtYWlsKSB7CiAgICAgIHJldHVybiB0aGlzLmZldGNoKHsKICAgICAgICBwYXRoOiAnZW1haWxfZXhpc3RzJywKICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgIGVtYWlsOiBlbWFpbAogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgc2VuZE1lcmdlVmVyaWZpY2F0aW9uRW1haWwodGFyZ2V0RW1haWwpIHsKICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goewogICAgICAgIHBhdGg6ICdzZW5kX21lcmdlX3ZlcmlmaWNhdGlvbl9lbWFpbCcsCiAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICB0YXJnZXRfZW1haWw6IHRhcmdldEVtYWlsCiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgfQoKICA7CiAgVXNlclJlY29yZHNJbnRlcmZhY2UucHJvdG90eXBlLm1vZGVsID0gVXNlck1vZGVsOwogIFVzZXJSZWNvcmRzSW50ZXJmYWNlLnByb3RvdHlwZS5hcGlFbmRQb2ludCA9ICdwcm9maWxlJzsKICByZXR1cm4gVXNlclJlY29yZHNJbnRlcmZhY2U7Cn0uY2FsbCh0aGlzKTs="},{"version":3,"sources":["/home/gustavo/Documents/tese/loomio/vue/src/shared/interfaces/user_records_interface.coffee"],"names":[],"mappings":"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","sourcesContent":["import BaseRecordsInterface from '@/shared/record_store/base_records_interface'\nimport UserModel            from '@/shared/models/user_model'\nimport AnonymousUserModel   from '@/shared/models/anonymous_user_model'\nimport {map, includes, merge, pickBy, identity} from 'lodash'\n\nexport default class UserRecordsInterface extends BaseRecordsInterface\n  model: UserModel\n  apiEndPoint: 'profile'\n\n  nullModel: -> new AnonymousUserModel()\n\n  fetchTimeZones: ->\n    @remote.fetch path: \"time_zones\"\n\n  fetchGroups: ->\n    @fetch\n      path: \"groups\"\n      params:\n        exclude_types: 'user'\n\n  fetchMentionable: (q, model) =>\n    model = model.discussion() if !model.id? && model.discussionId\n    model = model.group() if !model.id? && !model.discussionId\n    @fetch\n      path: 'mentionable_users'\n      params:\n        q: q\n        \"#{model.constructor.singular}_id\": model.id\n\n  updateProfile: (user) =>\n    user.processing = true\n    user.beforeSave()\n    @remote.post('update_profile', merge(user.serialize(), {unsubscribe_token: user.unsubscribeToken }))\n    .catch (data) =>\n      user.setErrors(data.errors) if data.errors\n      throw data\n    .finally -> user.processing = false\n\n  uploadAvatar: (file) =>\n    @remote.upload 'upload_avatar', file\n\n  changePassword: (user) =>\n    user.processing = true\n    @remote.post('change_password', user.serialize()).finally ->\n      user.processing = false\n\n  destroy: => @remote.delete '/'\n\n  saveExperience: (name, value = true) =>\n    @remote.post('save_experience', experience: name, value: value)\n\n  emailStatus: (email, token) ->\n    @fetch\n      path: 'email_status'\n      params: pickBy({email: email, token: token}, identity)\n\n  checkEmailExistence: (email) ->\n    @fetch\n      path: 'email_exists'\n      params:\n        email: email\n\n  sendMergeVerificationEmail: (targetEmail) ->\n    @fetch\n      path: 'send_merge_verification_email'\n      params:\n        target_email: targetEmail\n"],"sourceRoot":""}]}