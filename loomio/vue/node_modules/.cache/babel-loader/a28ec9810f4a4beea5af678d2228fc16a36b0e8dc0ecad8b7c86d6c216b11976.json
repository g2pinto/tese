{"ast":null,"code":"import { Extension } from '@tiptap/core';\n\n// type TextAlignOptions = {\n//   types: string[],\n//   alignments: string[],\n//   defaultAlignment: string,\n// }\n//\n// declare module '@tiptap/core' {\n//   interface Commands<ReturnType> {\n//     textAlign: {\n//       /**\n//        * Set the text align attribute\n//        */\n//       setTextAlign: (alignment: string) => ReturnType,\n//       /**\n//        * Unset the text align attribute\n//        */\n//       unsetTextAlign: () => ReturnType,\n//     }\n//   }\n// }\n\nexport const TextAlign = Extension.create({\n  name: 'textAlign',\n  addOptions() {\n    return {\n      types: [],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: 'left'\n    };\n  },\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        textAlign: {\n          default: this.options.defaultAlignment,\n          parseHTML: element => element.style.textAlign || element.getAttribute('data-text-align') || this.options.defaultAlignment,\n          renderHTML: attributes => {\n            if (attributes.textAlign === this.options.defaultAlignment) {\n              return {};\n            }\n            return {\n              'data-text-align': attributes.textAlign\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands() {\n    return {\n      setTextAlign: alignment => ({\n        commands\n      }) => {\n        if (!this.options.alignments.includes(alignment)) {\n          return false;\n        }\n        return this.options.types.every(type => commands.updateAttributes(type, {\n          textAlign: alignment\n        }));\n      },\n      unsetTextAlign: () => ({\n        commands\n      }) => {\n        return this.options.types.every(type => commands.resetAttributes(type, 'textAlign'));\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-l': () => this.editor.commands.setTextAlign('left'),\n      'Mod-Shift-e': () => this.editor.commands.setTextAlign('center'),\n      'Mod-Shift-r': () => this.editor.commands.setTextAlign('right'),\n      'Mod-Shift-j': () => this.editor.commands.setTextAlign('justify')\n    };\n  }\n});","map":{"version":3,"names":["Extension","TextAlign","create","name","addOptions","types","alignments","defaultAlignment","addGlobalAttributes","options","attributes","textAlign","default","parseHTML","element","style","getAttribute","renderHTML","addCommands","setTextAlign","alignment","commands","includes","every","type","updateAttributes","unsetTextAlign","resetAttributes","addKeyboardShortcuts","Mod-Shift-l","editor","Mod-Shift-e","Mod-Shift-r","Mod-Shift-j"],"sources":["/home/gustavo/Documents/tese/loomio/vue/src/components/lmo_textarea/extension_text_align.js"],"sourcesContent":["import { Extension } from '@tiptap/core'\n\n// type TextAlignOptions = {\n//   types: string[],\n//   alignments: string[],\n//   defaultAlignment: string,\n// }\n//\n// declare module '@tiptap/core' {\n//   interface Commands<ReturnType> {\n//     textAlign: {\n//       /**\n//        * Set the text align attribute\n//        */\n//       setTextAlign: (alignment: string) => ReturnType,\n//       /**\n//        * Unset the text align attribute\n//        */\n//       unsetTextAlign: () => ReturnType,\n//     }\n//   }\n// }\n\nexport const TextAlign = Extension.create({\n  name: 'textAlign',\n\n  addOptions() {\n    return {\n      types: [],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: 'left',\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          textAlign: {\n            default: this.options.defaultAlignment,\n            parseHTML: element => (\n              (element.style.textAlign || element.getAttribute('data-text-align') || this.options.defaultAlignment)\n            ),\n            renderHTML: attributes => {\n              if (attributes.textAlign === this.options.defaultAlignment) {\n                return {}\n              }\n\n              return { 'data-text-align': attributes.textAlign }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setTextAlign: (alignment) => ({ commands }) => {\n        if (!this.options.alignments.includes(alignment)) {\n          return false\n        }\n\n        return this.options.types.every(type => commands.updateAttributes(type, { textAlign: alignment }))\n      },\n      unsetTextAlign: () => ({ commands }) => {\n        return this.options.types.every(type => commands.resetAttributes(type, 'textAlign'))\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-l': () => this.editor.commands.setTextAlign('left'),\n      'Mod-Shift-e': () => this.editor.commands.setTextAlign('center'),\n      'Mod-Shift-r': () => this.editor.commands.setTextAlign('right'),\n      'Mod-Shift-j': () => this.editor.commands.setTextAlign('justify'),\n    }\n  },\n})\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,cAAc;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGD,SAAS,CAACE,MAAM,CAAC;EACxCC,IAAI,EAAE,WAAW;EAEjBC,UAAUA,CAAA,EAAG;IACX,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC;MAClDC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EAEDC,mBAAmBA,CAAA,EAAG;IACpB,OAAO,CACL;MACEH,KAAK,EAAE,IAAI,CAACI,OAAO,CAACJ,KAAK;MACzBK,UAAU,EAAE;QACVC,SAAS,EAAE;UACTC,OAAO,EAAE,IAAI,CAACH,OAAO,CAACF,gBAAgB;UACtCM,SAAS,EAAEC,OAAO,IACfA,OAAO,CAACC,KAAK,CAACJ,SAAS,IAAIG,OAAO,CAACE,YAAY,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAACP,OAAO,CAACF,gBACrF;UACDU,UAAU,EAAEP,UAAU,IAAI;YACxB,IAAIA,UAAU,CAACC,SAAS,KAAK,IAAI,CAACF,OAAO,CAACF,gBAAgB,EAAE;cAC1D,OAAO,CAAC,CAAC;YACX;YAEA,OAAO;cAAE,iBAAiB,EAAEG,UAAU,CAACC;YAAU,CAAC;UACpD;QACF;MACF;IACF,CAAC,CACF;EACH,CAAC;EAEDO,WAAWA,CAAA,EAAG;IACZ,OAAO;MACLC,YAAY,EAAGC,SAAS,IAAK,CAAC;QAAEC;MAAS,CAAC,KAAK;QAC7C,IAAI,CAAC,IAAI,CAACZ,OAAO,CAACH,UAAU,CAACgB,QAAQ,CAACF,SAAS,CAAC,EAAE;UAChD,OAAO,KAAK;QACd;QAEA,OAAO,IAAI,CAACX,OAAO,CAACJ,KAAK,CAACkB,KAAK,CAACC,IAAI,IAAIH,QAAQ,CAACI,gBAAgB,CAACD,IAAI,EAAE;UAAEb,SAAS,EAAES;QAAU,CAAC,CAAC,CAAC;MACpG,CAAC;MACDM,cAAc,EAAEA,CAAA,KAAM,CAAC;QAAEL;MAAS,CAAC,KAAK;QACtC,OAAO,IAAI,CAACZ,OAAO,CAACJ,KAAK,CAACkB,KAAK,CAACC,IAAI,IAAIH,QAAQ,CAACM,eAAe,CAACH,IAAI,EAAE,WAAW,CAAC,CAAC;MACtF;IACF,CAAC;EACH,CAAC;EAEDI,oBAAoBA,CAAA,EAAG;IACrB,OAAO;MACL,aAAa,EAAEC,CAAA,KAAM,IAAI,CAACC,MAAM,CAACT,QAAQ,CAACF,YAAY,CAAC,MAAM,CAAC;MAC9D,aAAa,EAAEY,CAAA,KAAM,IAAI,CAACD,MAAM,CAACT,QAAQ,CAACF,YAAY,CAAC,QAAQ,CAAC;MAChE,aAAa,EAAEa,CAAA,KAAM,IAAI,CAACF,MAAM,CAACT,QAAQ,CAACF,YAAY,CAAC,OAAO,CAAC;MAC/D,aAAa,EAAEc,CAAA,KAAM,IAAI,CAACH,MAAM,CAACT,QAAQ,CAACF,YAAY,CAAC,SAAS;IAClE,CAAC;EACH;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}