{"ast":null,"code":"import { Mark, markInputRule, markPasteRule, mergeAttributes } from '@tiptap/core';\nexport const inputRegex = /(?:^|\\s)((?:==)((?:[^~]+))(?:==))$/;\nexport const pasteRegex = /(?:^|\\s)((?:==)((?:[^~]+))(?:==))/g;\nexport const Highlight = Mark.create({\n  name: 'highlight',\n  addOptions: {\n    HTMLAttributes: {}\n  },\n  addAttributes() {\n    return {\n      color: {\n        default: null,\n        parseHTML: element => element.getAttribute('data-color'),\n        renderHTML: attributes => {\n          if (!attributes.color) {\n            return {};\n          }\n          return {\n            'data-color': attributes.color\n          };\n        }\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'mark'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['mark', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setHighlight: attributes => ({\n        commands\n      }) => {\n        return commands.setMark('highlight', attributes);\n      },\n      toggleHighlight: attributes => ({\n        commands\n      }) => {\n        return commands.toggleMark('highlight', attributes);\n      },\n      unsetHighlight: () => ({\n        commands\n      }) => {\n        return commands.unsetMark('highlight');\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-h': () => this.editor.commands.toggleHighlight()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});","map":{"version":3,"names":["Mark","markInputRule","markPasteRule","mergeAttributes","inputRegex","pasteRegex","Highlight","create","name","addOptions","HTMLAttributes","addAttributes","color","default","parseHTML","element","getAttribute","renderHTML","attributes","tag","options","addCommands","setHighlight","commands","setMark","toggleHighlight","toggleMark","unsetHighlight","unsetMark","addKeyboardShortcuts","Mod-Shift-h","editor","addInputRules","find","type","addPasteRules"],"sources":["/home/gustavo/Documents/tese/loomio/vue/src/components/lmo_textarea/extension_highlight.js"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport const inputRegex = /(?:^|\\s)((?:==)((?:[^~]+))(?:==))$/\nexport const pasteRegex = /(?:^|\\s)((?:==)((?:[^~]+))(?:==))/g\n\nexport const Highlight = Mark.create({\n  name: 'highlight',\n\n  addOptions: {\n    HTMLAttributes: {},\n  },\n\n  addAttributes() {\n    return {\n      color: {\n        default: null,\n        parseHTML: element => ( element.getAttribute('data-color') ),\n        renderHTML: attributes => {\n          if (!attributes.color) { return {} }\n\n          return { 'data-color': attributes.color }\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'mark',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['mark', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHighlight: attributes => ({ commands }) => {\n        return commands.setMark('highlight', attributes)\n      },\n      toggleHighlight: attributes => ({ commands }) => {\n        return commands.toggleMark('highlight', attributes)\n      },\n      unsetHighlight: () => ({ commands }) => {\n        return commands.unsetMark('highlight')\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-h': () => this.editor.commands.toggleHighlight(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"],"mappings":"AAAA,SACEA,IAAI,EACJC,aAAa,EACbC,aAAa,EACbC,eAAe,QACV,cAAc;AAErB,OAAO,MAAMC,UAAU,GAAG,oCAAoC;AAC9D,OAAO,MAAMC,UAAU,GAAG,oCAAoC;AAE9D,OAAO,MAAMC,SAAS,GAAGN,IAAI,CAACO,MAAM,CAAC;EACnCC,IAAI,EAAE,WAAW;EAEjBC,UAAU,EAAE;IACVC,cAAc,EAAE,CAAC;EACnB,CAAC;EAEDC,aAAaA,CAAA,EAAG;IACd,OAAO;MACLC,KAAK,EAAE;QACLC,OAAO,EAAE,IAAI;QACbC,SAAS,EAAEC,OAAO,IAAMA,OAAO,CAACC,YAAY,CAAC,YAAY,CAAG;QAC5DC,UAAU,EAAEC,UAAU,IAAI;UACxB,IAAI,CAACA,UAAU,CAACN,KAAK,EAAE;YAAE,OAAO,CAAC,CAAC;UAAC;UAEnC,OAAO;YAAE,YAAY,EAAEM,UAAU,CAACN;UAAM,CAAC;QAC3C;MACF;IACF,CAAC;EACH,CAAC;EAEDE,SAASA,CAAA,EAAG;IACV,OAAO,CACL;MACEK,GAAG,EAAE;IACP,CAAC,CACF;EACH,CAAC;EAEDF,UAAUA,CAAC;IAAEP;EAAe,CAAC,EAAE;IAC7B,OAAO,CAAC,MAAM,EAAEP,eAAe,CAAC,IAAI,CAACiB,OAAO,CAACV,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;EAClF,CAAC;EAEDW,WAAWA,CAAA,EAAG;IACZ,OAAO;MACLC,YAAY,EAAEJ,UAAU,IAAI,CAAC;QAAEK;MAAS,CAAC,KAAK;QAC5C,OAAOA,QAAQ,CAACC,OAAO,CAAC,WAAW,EAAEN,UAAU,CAAC;MAClD,CAAC;MACDO,eAAe,EAAEP,UAAU,IAAI,CAAC;QAAEK;MAAS,CAAC,KAAK;QAC/C,OAAOA,QAAQ,CAACG,UAAU,CAAC,WAAW,EAAER,UAAU,CAAC;MACrD,CAAC;MACDS,cAAc,EAAEA,CAAA,KAAM,CAAC;QAAEJ;MAAS,CAAC,KAAK;QACtC,OAAOA,QAAQ,CAACK,SAAS,CAAC,WAAW,CAAC;MACxC;IACF,CAAC;EACH,CAAC;EAEDC,oBAAoBA,CAAA,EAAG;IACrB,OAAO;MACL,aAAa,EAAEC,CAAA,KAAM,IAAI,CAACC,MAAM,CAACR,QAAQ,CAACE,eAAe,CAAC;IAC5D,CAAC;EACH,CAAC;EAEDO,aAAaA,CAAA,EAAG;IACd,OAAO,CACL/B,aAAa,CAAC;MACZgC,IAAI,EAAE7B,UAAU;MAChB8B,IAAI,EAAE,IAAI,CAACA;IACb,CAAC,CAAC,CACH;EACH,CAAC;EAEDC,aAAaA,CAAA,EAAG;IACd,OAAO,CACLjC,aAAa,CAAC;MACZ+B,IAAI,EAAE5B,UAAU;MAChB6B,IAAI,EAAE,IAAI,CAACA;IACb,CAAC,CAAC,CACH;EACH;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}